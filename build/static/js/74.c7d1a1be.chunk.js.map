{"version":3,"sources":["../node_modules/react-bootstrap/esm/SplitButton.js","pages/uikit/Dropdowns.js","components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-overlays/esm/safeFindDOMNode.js","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/DropdownButton.js"],"names":["propTypes","id","PropTypes","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","SplitButton","React","ref","children","props","_jsxs","Dropdown","as","ButtonGroup","_jsx","Button","Toggle","split","toString","undefined","childBsPrefix","className","Menu","role","renderOnMount","defaultProps","displayName","colors","name","color","SingleButtonDropdown","Card","Body","Row","Col","DropdownButton","Item","DropdownMenuAlignment","ColorVariantButtonDropdown","Fragment","map","index","Divider","AnimatedButtonDropdown","DropupVariationDropdowns","variations","item","drop","eventKey","DropstartVariationDropdowns","DropendVariationDropdowns","SplitColorVariantButtonDropdown","ButtonDropdownSizes","DropdownType","ActiveItemDropdown","active","DisabledItemDropdown","DropdownWithHeader","Header","DropdownWithText","style","maxWidth","CustomDropdown","htmlFor","placeholder","Dropdowns","PageTitle","breadCrumbItems","label","path","lg","p","classNames","context","toFnRef","value","current","useMergedRefs","refA","refB","useMemo","a","b","mergeRefs","DEVICE_SIZES","noGutters","Component","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","prefix","spans","span","offset","order","length","BreadcrumbItem","linkAs","LinkComponent","SafeAnchor","linkProps","Breadcrumb","listProps","Object","assign","CardImg","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","Provider","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Img","Title","Subtitle","Link","Text","Footer","ImgOverlay","safeFindDOMNode","componentOrElement","ReactDOM","findDOMNode","alignDirection","oneOf","oneOfType","shape","sm","md","xl","xxl","vertical","rest","baseClass","menuVariant","DropdownToggle","DropdownMenu"],"mappings":"qZAQMA,EAAY,CAMhBC,GAAIC,IAAUC,IAKdC,YAAaF,IAAUG,OAGvBC,KAAMJ,IAAUG,OAGhBE,OAAQL,IAAUG,OAGlBG,QAASN,IAAUO,KAGnBC,MAAOR,IAAUS,KAAKC,WAGtBC,KAAMX,IAAUG,OAGhBS,SAAUZ,IAAUa,KASpBC,MAAOC,IAGPC,SAAUhB,IAAUG,OAGpBc,kBAAmBjB,IAAUa,KAO7BK,eAAgBlB,IAAUG,OAG1BgB,SAAUnB,IAAUG,OAGpBiB,QAASpB,IAAUG,OAGnBkB,KAAMrB,IAAUG,QAiBZmB,EAA2BC,cAAiB,WAgB/CC,GAhB+C,IAChDzB,EADgD,EAChDA,GACAoB,EAFgD,EAEhDA,SACAE,EAHgD,EAGhDA,KACAD,EAJgD,EAIhDA,QACAZ,EALgD,EAKhDA,MACAG,EANgD,EAMhDA,KACAT,EAPgD,EAOhDA,YACAuB,EARgD,EAQhDA,SACAnB,EATgD,EAShDA,QACAF,EAVgD,EAUhDA,KACAC,EAXgD,EAWhDA,OACAW,EAZgD,EAYhDA,SACAC,EAbgD,EAahDA,kBACAC,EAdgD,EAchDA,eACGQ,EAf6C,wBAgB1BC,eAAMC,IAAD,YAAC,aAC5BJ,IAAKA,GACFE,GAFwB,IAG3BG,GAAIC,IACJL,SAAU,CAAcM,cAAKC,IAAQ,CACnCX,KAAMA,EACND,QAASA,EACTR,SAAUc,EAAMd,SAChBO,SAAUA,EACVf,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTK,KAAMA,EACNc,SAAUjB,IACKuB,cAAKH,IAASK,OAAQ,CACrCC,OAAO,EACPnC,GAAIA,EAAKA,EAAGoC,gBAAaC,EACzBf,KAAMA,EACND,QAASA,EACTR,SAAUc,EAAMd,SAChByB,cAAelB,EACfM,SAAuBM,cAAK,OAAQ,CAClCO,UAAW,kBACXb,SAAUvB,MAEG6B,cAAKH,IAASW,KAAM,CACnCC,KAAMxB,EACNyB,cAAexB,EACfC,eAAgBA,EAChBO,SAAUA,WAGdH,EAAYxB,UAAYA,EACxBwB,EAAYoB,aAhES,CACnBxC,YAAa,kBACbS,KAAM,UA+DRW,EAAYqB,YAAc,cACXrB,Q,SCjITsB,EAAS,CACX,CACIC,KAAM,UACNC,MAAO,WAEX,CACID,KAAM,YACNC,MAAO,aAEX,CACID,KAAM,UACNC,MAAO,WAEX,CACID,KAAM,OACNC,MAAO,QAEX,CACID,KAAM,UACNC,MAAO,WAEX,CACID,KAAM,SACNC,MAAO,WAITC,EAAuB,WACzB,OACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,qCACA,oBAAGA,UAAU,qBAAb,yBACgB,kDADhB,uDACgG,IAC5F,sCAFJ,gDAKA,eAACY,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKb,UAAU,WAAf,SACI,eAACc,EAAA,EAAD,CAAgBhC,QAAQ,QAAQZ,MAAM,kBAAtC,UACI,cAACoB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,oBACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,4BACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,sCAGR,cAAC+C,EAAA,EAAD,CAAKb,UAAU,WAAf,SACI,eAACc,EAAA,EAAD,CAAgBhC,QAAQ,YAAYS,GAAG,IAAIrB,MAAM,gBAAjD,UACI,cAACoB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,oBACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,4BACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,+CAStBkD,EAAwB,WAC1B,OACI,cAACN,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,4BACA,oBAAGA,UAAU,qBAAb,qBACY,yCADZ,WACsC,6CADtC,eAEI,mDAFJ,wCAKA,eAACc,EAAA,EAAD,CAAgBhC,QAAQ,QAAQN,MAAM,MAAMN,MAAM,sBAAlD,UACI,cAACoB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,oBACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,4BACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,0CAOdmD,EAA6B,WAC/B,OACI,cAAC,IAAMC,SAAP,UACI,cAACR,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,qBACA,mBAAGA,UAAU,0BAAb,4EAICM,EAAOa,KAAI,SAACX,EAAOY,GAChB,OACI,eAAC9B,EAAA,EAAD,CAAsBC,GAAIC,IAAaQ,UAAU,OAAjD,UACI,cAACV,EAAA,EAASK,OAAV,CAAiBb,QAAS0B,EAAMA,MAAhC,SAAwCA,EAAMD,OAC9C,eAACjB,EAAA,EAASW,KAAV,WACI,cAACX,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,oBACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,4BACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,iCACA,cAACwB,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,iCAPOsD,cAkBrCE,EAAyB,WAC3B,OACI,mCACI,cAACZ,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,+BACA,oBAAGA,UAAU,qBAAb,iBACQ,2DADR,SACkD,iDADlD,sCAIA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,CAAiBb,QAAQ,QAAzB,+BACA,eAACQ,EAAA,EAASW,KAAV,CAAeD,UAAU,yBAAzB,UACI,cAACV,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,oBACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,4BACA,cAACwB,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,iCACA,cAACwB,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAejD,KAAK,IAApB,0CAStByD,EAA2B,WAC7B,IAAMC,EAAa,CACf,CACInD,KAAMyC,IACNP,KAAM,UAEV,CACIlC,KAAMW,EACNuB,KAAM,iBAGd,OACI,mCACI,cAACG,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,8BACA,oBAAGA,UAAU,0BAAb,6EACoE,wCADpE,YAGCwB,EAAWL,KAAI,SAACM,EAAML,GAAP,OACZ,eAACK,EAAKpD,KAAN,CACIkB,GAAIC,IAEJkC,KAAK,KACLxD,MAAOuD,EAAKlB,KACZzB,QAAQ,QACRkB,UAAU,OANd,UAOI,cAACV,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BATKP,cAkB3BQ,EAA8B,WAChC,IAAMJ,EAAa,CACf,CACInD,KAAMyC,IACNP,KAAM,aAEV,CACIlC,KAAMW,EACNuB,KAAM,oBAGd,OACI,mCACI,cAACG,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,8BACA,oBAAGA,UAAU,0BAAb,4EACmE,wCADnE,YAGCwB,EAAWL,KAAI,SAACM,EAAML,GAAP,OACZ,eAACK,EAAKpD,KAAN,CACIkB,GAAIC,IAEJkC,KAAK,QACLxD,MAAOuD,EAAKlB,KACZzB,QAAQ,YACRkB,UAAU,OANd,UAOI,cAACV,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BATKP,cAkB3BS,EAA4B,WAC9B,IAAML,EAAa,CACf,CACInD,KAAMyC,IACNP,KAAM,WAEV,CACIlC,KAAMW,EACNuB,KAAM,kBAGd,OACI,mCACI,cAACG,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,8BACA,oBAAGA,UAAU,0BAAb,6EACoE,wCADpE,YAGCwB,EAAWL,KAAI,SAACM,EAAML,GAAP,OACZ,eAACK,EAAKpD,KAAN,CACIkB,GAAIC,IAEJkC,KAAK,MACLxD,MAAOuD,EAAKlB,KACZzB,QAAQ,UACRkB,UAAU,OANd,UAOI,cAACV,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BATKP,cAkB3BU,EAAkC,WACpC,OACI,cAAC,IAAMZ,SAAP,UACI,cAACR,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,oCACA,oBAAGA,UAAU,0BAAb,sDAC6C,+CAD7C,OAICM,EAAOa,KAAI,SAACX,EAAOY,GAChB,OACI,eAAC,EAAD,CAAyBtC,QAAS0B,EAAMA,MAAOtC,MAAOsC,EAAMD,KAAMP,UAAU,YAA5E,UACI,cAACV,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BALcP,cAexCW,EAAsB,WACxB,OACI,cAAC,IAAMb,SAAP,UACI,cAACR,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,oBACA,mBAAGA,UAAU,qBAAb,4GAIC,CAACc,IAAgB9B,GAAamC,KAAI,SAACa,EAAcZ,GAAf,OAC/B,eAACY,EAAD,CAAczC,GAAIC,IAAyBT,KAAK,KAAKb,MAAM,eAAeY,QAAQ,QAAlF,UACI,cAACQ,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BALgCP,MAQvC,CAACN,IAAgB9B,GAAamC,KAAI,SAACa,EAAcZ,GAAf,OAC/B,eAACY,EAAD,CAAczC,GAAIC,IAAyBT,KAAK,KAAKb,MAAM,eAAeY,QAAQ,QAAlF,UACI,cAACQ,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,oBACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4BACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,iCACA,cAACrC,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,8BALgCP,cActDa,EAAqB,WACvB,OACI,mCACI,cAACvB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,yBAEA,oBAAGA,UAAU,qBAAb,iBACQ,0CADR,oCAC4D,0DAD5D,OAIA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,CAAiBb,QAAQ,YAAzB,yBACA,eAACQ,EAAA,EAASW,KAAV,WACI,cAACX,EAAA,EAASyB,KAAV,2BACA,cAACzB,EAAA,EAASyB,KAAV,CAAemB,QAAM,EAArB,yBACA,cAAC5C,EAAA,EAASyB,KAAV,yCAStBoB,EAAuB,WACzB,OACI,mCACI,cAACzB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,2BAEA,oBAAGA,UAAU,qBAAb,iBACQ,4CADR,mCAC8D,IAC1D,4DAFJ,OAKA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,0BACA,eAACL,EAAA,EAASW,KAAV,WACI,cAACX,EAAA,EAASyB,KAAV,2BACA,cAACzB,EAAA,EAASyB,KAAV,CAAezC,UAAQ,EAAvB,2BACA,cAACgB,EAAA,EAASyB,KAAV,yCAStBqB,EAAqB,WACvB,OACI,mCACI,cAAC1B,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,qBAEA,mBAAGA,UAAU,qBAAb,wDAEA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,CAAiBb,QAAQ,YAAzB,oBACA,eAACQ,EAAA,EAASW,KAAV,WACI,cAACX,EAAA,EAAS+C,OAAV,8BACA,cAAC/C,EAAA,EAASyB,KAAV,qBACA,cAACzB,EAAA,EAASyB,KAAV,2CAStBuB,EAAmB,WACrB,OACI,mCACI,cAAC5B,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,kBAEA,mBAAGA,UAAU,qBAAb,yLAKA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,4BACA,eAACL,EAAA,EAASW,KAAV,CAAeD,UAAU,iBAAiBuC,MAAO,CAAEC,SAAU,SAA7D,UACI,gGACA,mBAAGxC,UAAU,OAAb,0DAStByC,EAAiB,WACnB,OACI,mCACI,cAAC/B,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,oBAAIX,UAAU,eAAd,mBAEA,mBAAGA,UAAU,qBAAb,gKAKA,eAACV,EAAA,EAAD,WACI,cAACA,EAAA,EAASK,OAAV,CAAiBb,QAAQ,YAAzB,kBACA,eAACQ,EAAA,EAASW,KAAV,WACI,uBAAMD,UAAU,YAAhB,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAO0C,QAAQ,4BAA4B1C,UAAU,aAArD,2BAGA,uBACI3B,KAAK,QACL2B,UAAU,eACVvC,GAAG,4BACHkF,YAAY,yBAGpB,sBAAK3C,UAAU,OAAf,UACI,uBAAO0C,QAAQ,+BAA+B1C,UAAU,aAAxD,sBAGA,uBACI3B,KAAK,WACL2B,UAAU,eACVvC,GAAG,+BACHkF,YAAY,gBAGpB,qBAAK3C,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBAAO3B,KAAK,WAAW2B,UAAU,mBAAmBvC,GAAG,kBACvD,uBAAOuC,UAAU,mBAAmB0C,QAAQ,gBAA5C,8BAKR,wBAAQrE,KAAK,SAAS2B,UAAU,kBAAhC,wBAIJ,cAACV,EAAA,EAAS+B,QAAV,IACA,cAAC/B,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,sCACA,cAACrC,EAAA,EAASyB,KAAV,CAAeY,SAAS,IAAxB,4CA6CbiB,UApCG,WACd,OACI,eAAC,IAAM1B,SAAP,WACI,cAAC2B,EAAA,EAAD,CACIC,gBAAiB,CACb,CAAEC,MAAO,UAAWC,KAAM,iBAC1B,CAAED,MAAO,YAAaC,KAAM,gBAAiBd,QAAQ,IAEzDhE,MAAO,cAGX,eAAC0C,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKoC,GAAI,EAAT,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,OAGJ,eAACpC,EAAA,EAAD,CAAKoC,GAAI,EAAT,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,e,iCC9fpB,2CA8CeJ,IA7BG,SAACzD,GACf,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,sBAAKY,UAAU,iBAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,eAAC,IAAD,CAAYA,UAAU,MAAtB,UACI,cAAC,IAAWe,KAAZ,CAAiBjD,KAAK,IAAtB,mBAECsB,EAAM0D,gBAAgB3B,KAAI,SAACM,EAAML,GAC9B,OAAOK,EAAKS,OACR,cAAC,IAAWnB,KAAZ,CAAiBmB,QAAM,EAAvB,SACKT,EAAKsB,OADmB3B,GAI7B,cAAC,IAAWL,KAAZ,CAA6BjD,KAAM2D,EAAKuB,KAAxC,SACKvB,EAAKsB,OADY3B,WAOtC,oBAAIpB,UAAU,aAAd,SAA4BZ,EAAMlB,iB,2ECrCtC,aAAA8B,GAAS,OAAiBf,cAAiB,SAACiE,EAAGhE,GAAJ,OAAyBO,cAAK,MAAD,YAAC,eAAYyD,GAAb,IACtFhE,IAAKA,EACLc,UAAWmD,IAAWD,EAAElD,UAAWA,W,iCCLrC,WACMoD,EAAuBnE,gBAAoB,MACjDmE,EAAQ/C,YAAc,oBACP+C,O,iCCHf,WAEIC,EAAU,SAAiBnE,GAC7B,OAAQA,GAAsB,oBAARA,EAA2B,SAAUoE,GACzDpE,EAAIqE,QAAUD,GAD2BpE,GAoC9BsE,IANf,SAAuBC,EAAMC,GAC3B,OAAOC,mBAAQ,WACb,OA3BG,SAAmBF,EAAMC,GAC9B,IAAIE,EAAIP,EAAQI,GACZI,EAAIR,EAAQK,GAChB,OAAO,SAAUJ,GACXM,GAAGA,EAAEN,GACLO,GAAGA,EAAEP,IAsBFQ,CAAUL,EAAMC,KACtB,CAACD,EAAMC,M,uIChCNK,EAAe,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,MAI/CnD,EAAmB3B,cAAiB,WAOvCC,GAAQ,IANTL,EAMS,EANTA,SACAmB,EAKS,EALTA,UACAgE,EAIS,EAJTA,UAIS,IAFTzE,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACH8E,EAAoBC,YAAmBtF,EAAU,OACjDuF,EAAa,GAAH,OAAMF,EAAN,SACVG,EAAU,GAiBhB,OAhBAN,EAAaO,SAAQ,SAAAC,GACnB,IAEIC,EAFEC,EAAYrF,EAAMmF,UACjBnF,EAAMmF,GAKTC,EAFa,MAAbC,GAA0C,kBAAdA,EAG1BA,EADFD,KAGKC,EAGT,IAAMC,EAAqB,OAAbH,EAAA,WAAwBA,GAAa,GACvC,MAARC,GAAcH,EAAQM,KAAR,UAAgBP,GAAhB,OAA6BM,EAA7B,YAAsCF,OAEtC/E,cAAKwE,EAAD,YAAC,aACvB/E,IAAKA,GACFE,GAFmB,IAGtBY,UAAWmD,IAAU,WAAV,GAAWnD,EAAWkE,EAAmBF,GAAa,cAAtD,OAAuEK,UAGtFzD,EAAIP,YAAc,MAClBO,EAAIR,aArCiB,CACnB4D,WAAW,GAqCEpD,O,2HCvCTmD,EAAe,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,MAC/ClD,EAAmB5B,cACzB,WAKGC,GAAQ,IAJTL,EAIS,EAJTA,SACAmB,EAGS,EAHTA,UAGS,IAFTT,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,OACtCgG,EAAQ,GACRR,EAAU,GA4BhB,OA3BAN,EAAaO,SAAQ,SAAAC,GACnB,IAEIO,EACAC,EACAC,EAJEP,EAAYrF,EAAMmF,GAMxB,UALOnF,EAAMmF,GAKY,kBAAdE,GAAuC,MAAbA,EAAmB,OAKlDA,EAHFK,YAFoD,SAGpDC,EAEEN,EAFFM,OACAC,EACEP,EADFO,WAGFF,EAAOL,EAGT,IAAMC,EAAqB,OAAbH,EAAA,WAAwBA,GAAa,GAC/CO,GAAMD,EAAMF,MAAc,IAATG,EAAA,UAAmBF,GAAnB,OAA4BF,GAA5B,UAAyCE,GAAzC,OAAkDF,EAAlD,YAA2DI,IACnE,MAATE,GAAeX,EAAQM,KAAR,eAAqBD,EAArB,YAA8BM,IACnC,MAAVD,GAAgBV,EAAQM,KAAR,gBAAsBD,EAAtB,YAA+BK,OAGhDF,EAAMI,QACTJ,EAAMF,KAAKC,GAGOnF,cAAKwE,EAAD,YAAC,eAAgB7E,GAAjB,IACtBF,IAAKA,EACLc,UAAWmD,IAAU,WAAV,GAAWnD,GAAX,OAAyB6E,EAAUR,UAGlDxD,EAAIR,YAAc,MACHQ,O,qMCvCTqE,EAA8BjG,cAAiB,WAalDC,GAAQ,IAZTL,EAYS,EAZTA,SACAqD,EAWS,EAXTA,OACA/C,EAUS,EAVTA,SACAa,EASS,EATTA,UASS,IAPTT,GAAI0E,OAOK,MAPO,KAOP,MANTkB,OAAQC,OAMC,MANeC,IAMf,EALTC,EAKS,EALTA,UACAxH,EAIS,EAJTA,KACAI,EAGS,EAHTA,MACAH,EAES,EAFTA,OACGqB,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,mBAC5C,OAAoBY,cAAKwE,EAAD,YAAC,aACvB/E,IAAKA,GACFE,GAFmB,IAGtBY,UAAWmD,IAAWyB,EAAQ5E,EAAW,CACvCkC,WAEF,eAAgBA,EAAS,YAASpC,EAClCX,SAAU+C,EAAS/C,EAAwBM,cAAK2F,EAAD,YAAC,eAAoBE,GAArB,IAC7CxH,KAAMA,EACNI,MAAOA,EACPH,OAAQA,EACRoB,SAAUA,WAIhB+F,EAAe7E,YAAc,iBAC7B6E,EAAe9E,aAnCM,CACnB8B,QAAQ,EACRoD,UAAW,IAkCEJ,Q,+DChCTK,EAA0BtG,cAAiB,WAS9CC,GAAQ,IARTL,EAQS,EARTA,SACAmB,EAOS,EAPTA,UACAwF,EAMS,EANTA,UACArG,EAKS,EALTA,SACA4D,EAIS,EAJTA,MAIS,IAFTxD,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,cAC5C,OAAoBY,cAAKwE,EAAD,YAAC,aACvB,aAAclB,EACd/C,UAAWA,EACXd,IAAKA,GACFE,GAJmB,IAKtBD,SAAuBM,cAAK,KAAD,YAAC,eAAW+F,GAAZ,IACzBxF,UAAWmD,IAAWyB,EAAqB,MAAbY,OAAoB,EAASA,EAAUxF,WACrEb,SAAUA,WAIhBoG,EAAWlF,YAAc,aACzBkF,EAAWnF,aA3BU,CACnB2C,MAAO,aACPyC,UAAW,IA0BEC,WAAOC,OAAOH,EAAY,CACvCxE,KAAMmE,K,uJC9BFS,EAAuB1G,cAC7B,WAMGC,GAAQ,IALTL,EAKS,EALTA,SACAmB,EAIS,EAJTA,UACAlB,EAGS,EAHTA,QAGS,IAFTS,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,YAC5C,OAAoBY,cAAKwE,EAAD,aACtB/E,IAAKA,EACLc,UAAWmD,IAAWrE,EAAU,GAAH,OAAM8F,EAAN,YAAgB9F,GAAY8F,EAAQ5E,IAC9DZ,OAGPuG,EAAQtF,YAAc,UACPsF,Q,yCCdTC,EAA0B3G,cAAiB,WAM9CC,GAAQ,IALTL,EAKS,EALTA,SACAmB,EAIS,EAJTA,UAIS,IAFTT,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,eACtCgH,EAAelC,mBAAQ,iBAAO,CAClCmC,mBAAoBlB,KAClB,CAACA,IACL,OAAoBnF,cAAKsG,IAAkBC,SAAU,CACnD1C,MAAOuC,EACP1G,SAAuBM,cAAKwE,EAAD,YAAC,aAC1B/E,IAAKA,GACFE,GAFsB,IAGzBY,UAAWmD,IAAWnD,EAAW4E,WAIvCgB,EAAWvF,YAAc,aACVuF,Q,uECnBTK,EAAgBC,YAAiB,MACjCC,EAAgBD,YAAiB,MACjCE,EAAWC,YAAmB,aAC9BC,EAAYD,YAAmB,aAAc,CACjDpC,UAAWgC,IAEPM,EAAeF,YAAmB,gBAAiB,CACvDpC,UAAWkC,IAEPK,EAAWH,YAAmB,YAAa,CAC/CpC,UAAW,MAEPwC,EAAWJ,YAAmB,YAAa,CAC/CpC,UAAW,MAEPyC,EAAaL,YAAmB,eAChCM,EAAiBN,YAAmB,oBAIpC3F,EAAoBzB,cAAiB,WAWxCC,GAAQ,IAVTL,EAUS,EAVTA,SACAmB,EASS,EATTA,UACA4G,EAQS,EARTA,GACAC,EAOS,EAPTA,KACAC,EAMS,EANTA,OACAC,EAKS,EALTA,KACA5H,EAIS,EAJTA,SAIS,IAFTI,GAAI0E,OAEK,MAFO,MAEP,EADN7E,EACM,iBACHwF,EAAST,YAAmBtF,EAAU,QAC5C,OAAoBY,cAAKwE,EAAD,YAAC,aACvB/E,IAAKA,GACFE,GAFmB,IAGtBY,UAAWmD,IAAWnD,EAAW4E,EAAQgC,GAAM,MAAJ,OAAUA,GAAMC,GAAQ,QAAJ,OAAYA,GAAQC,GAAU,UAAJ,OAAcA,IACvG3H,SAAU4H,EAAoBtH,cAAK2G,EAAU,CAC3CjH,SAAUA,IACPA,QAGTuB,EAAKL,YAAc,OACnBK,EAAKN,aA1BgB,CACnB2G,MAAM,GA0BOtB,WAAOC,OAAOhF,EAAM,CACjCsG,IAAKrB,EACLsB,MAAOX,EACPY,SAAUX,EACV5F,KAAMyF,EACNe,KAAMX,EACNY,KAAMX,EACNpE,OAAQuD,EACRyB,OAAQX,EACRY,WAAYX,K,iCC7Dd,WACMvD,EAAuBnE,gBAAoB,MACjDmE,EAAQ/C,YAAc,oBACP+C,O,iCCHf,uDACe,SAASmE,EAAgBC,GACtC,OAAIA,GAAsB,aAAcA,EAC/BC,IAASC,YAAYF,GAGD,MAAtBA,EAA6BA,EAAqB,O,iCCN3D,uDACMG,EAAiBjK,IAAUkK,MAAM,CAAC,QAAS,QACpCnJ,EAAgBf,IAAUmK,UAAU,CAACF,EAAgBjK,IAAUoK,MAAM,CAChFC,GAAIJ,IACFjK,IAAUoK,MAAM,CAClBE,GAAIL,IACFjK,IAAUoK,MAAM,CAClB7E,GAAI0E,IACFjK,IAAUoK,MAAM,CAClBG,GAAIN,IACFjK,IAAUoK,MAAM,CAClBI,IAAKP,O,6ICHDnI,EAA2BP,cAAiB,WAQ/CC,GAAQ,IAPTL,EAOS,EAPTA,SACAE,EAMS,EANTA,KACAoJ,EAKS,EALTA,SACAnI,EAIS,EAJTA,UAIS,IAFTT,GAAI0E,OAEK,MAFO,MAEP,EADNmE,EACM,iBACHxD,EAAST,YAAmBtF,EAAU,aACxCwJ,EAAYzD,EAEhB,OADIuD,IAAUE,EAAY,GAAH,OAAMzD,EAAN,cACHnF,cAAKwE,EAAD,YAAC,eAAgBmE,GAAjB,IACtBlJ,IAAKA,EACLc,UAAWmD,IAAWnD,EAAWqI,EAAWtJ,GAAQ,GAAJ,OAAO6F,EAAP,YAAiB7F,UAGrES,EAAYa,YAAc,cAC1Bb,EAAYY,aAtBS,CACnB+H,UAAU,EACVjI,KAAM,SAqBOV,O,+PCnBThC,EAAY,CAMhBC,GAAIC,IAAUC,IAGdG,KAAMJ,IAAUG,OAGhBG,QAASN,IAAUO,KAGnBC,MAAOR,IAAUS,KAAKC,WAGtBE,SAAUZ,IAAUa,KASpBC,MAAOC,IAGPC,SAAUhB,IAAUG,OAGpBc,kBAAmBjB,IAAUa,KAO7BK,eAAgBlB,IAAUG,OAO1ByK,YAAa5K,IAAUkK,MAAM,CAAC,SAG9B/I,SAAUnB,IAAUG,OAGpBiB,QAASpB,IAAUG,OAGnBkB,KAAMrB,IAAUG,QAYZiD,EAA8B7B,cAAiB,WAclDC,GAdkD,IACnDhB,EADmD,EACnDA,MACAiB,EAFmD,EAEnDA,SACAN,EAHmD,EAGnDA,SACAD,EAJmD,EAInDA,eACAE,EALmD,EAKnDA,QACAC,EANmD,EAMnDA,KACAL,EAPmD,EAOnDA,SACAC,EARmD,EAQnDA,kBACAL,EATmD,EASnDA,SACAR,EAVmD,EAUnDA,KACAL,EAXmD,EAWnDA,GACA6K,EAZmD,EAYnDA,YACGlJ,EAbgD,wBAc7BC,eAAMC,IAAD,YAAC,aAC5BJ,IAAKA,GACFE,GAFwB,IAG3BD,SAAU,CAAcM,cAAK8I,IAAgB,CAC3C9K,GAAIA,EACJK,KAAMA,EACNiB,KAAMA,EACND,QAASA,EACTR,SAAUA,EACVyB,cAAelB,EACfM,SAAUjB,IACKuB,cAAK+I,IAAc,CAClCtI,KAAMxB,EACNyB,cAAexB,EACfC,eAAgBA,EAChBE,QAASwJ,EACTnJ,SAAUA,WAGd2B,EAAeT,YAAc,iBAC7BS,EAAetD,UAAYA,EACZsD","file":"static/js/74.c7d1a1be.chunk.js","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Dropdown, DropdownButton, SplitButton, ButtonGroup } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n];\n\nconst SingleButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Single button dropdowns</h4>\n                <p className=\"text-muted font-14\">\n                    You can use <code>DropdownButton</code> to create a simple dropdown. Also, you can use prop{' '}\n                    <code>as</code> to create custom element typeof dropdown.\n                </p>\n\n                <Row>\n                    <Col className=\"col-auto\">\n                        <DropdownButton variant=\"light\" title=\"Dropdown button\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        </DropdownButton>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        <DropdownButton variant=\"secondary\" as=\"a\" title=\"Dropdown link\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        </DropdownButton>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropdownMenuAlignment = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Menu alignment</h4>\n                <p className=\"text-muted font-14\">\n                    Passing <code>right</code> to the <code>menuAligh</code> prop on the\n                    <code> DropdownButton</code> to right align the dropdown menu.\n                </p>\n\n                <DropdownButton variant=\"light\" align=\"end\" title=\"Right-aligned menut\">\n                    <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                </DropdownButton>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ColorVariantButtonDropdown = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Variant</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        The best part is you can do this with any button variant, too:\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <Dropdown key={index} as={ButtonGroup} className=\"me-1\">\n                                <Dropdown.Toggle variant={color.color}>{color.name}</Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                    <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                    <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                    <Dropdown.Divider />\n                                    <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        );\n                    })}\n                </Card.Body>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst AnimatedButtonDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Animated Dropdown</h4>\n                    <p className=\"text-muted font-14\">\n                        Add <code>.dropdown-menu-animated</code> to a <code>Dropdown.Menu</code> to have animated\n                        dropdown menu.\n                    </p>\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"light\">Animated Dropdown</Dropdown.Toggle>\n                        <Dropdown.Menu className=\"dropdown-menu-animated\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropupVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropup',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropup',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus above of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"up\"\n                            title={item.name}\n                            variant=\"light\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropstartVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropstart',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropstart',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus left of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"start\"\n                            title={item.name}\n                            variant=\"secondary\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropendVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropend',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropend',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus right of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"end\"\n                            title={item.name}\n                            variant=\"primary\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst SplitColorVariantButtonDropdown = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Split button dropdowns</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        You can split button dropdowns by adding <code>SplitButton</code>.\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <SplitButton key={index} variant={color.color} title={color.name} className=\"me-1 mb-1\">\n                                <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                            </SplitButton>\n                        );\n                    })}\n                </Card.Body>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst ButtonDropdownSizes = () => {\n    return (\n        <React.Fragment>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\n                    </p>\n\n                    {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                        <DropdownType as={ButtonGroup} key={index} size=\"lg\" title=\"Large button\" variant=\"light\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </DropdownType>\n                    ))}\n                    {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                        <DropdownType as={ButtonGroup} key={index} size=\"sm\" title=\"Small button\" variant=\"light\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </DropdownType>\n                    ))}\n                </Card.Body>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nconst ActiveItemDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Active Item</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Add <code>active</code> prop to item in the dropdown to <strong>style them as active</strong>.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Active Item</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Regular link</Dropdown.Item>\n                            <Dropdown.Item active>Active link</Dropdown.Item>\n                            <Dropdown.Item>Another link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DisabledItemDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Disabled Item</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Add <code>disabled</code> prop to item in the dropdown to{' '}\n                        <strong>style them as disabled</strong>.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle>Active Item</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Regular link</Dropdown.Item>\n                            <Dropdown.Item disabled>Disabled link</Dropdown.Item>\n                            <Dropdown.Item>Another link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropdownWithHeader = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Headers</h4>\n\n                    <p className=\"text-muted font-14\">Add a header to label sections of actions.</p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Header</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Header>Dropdown header</Dropdown.Header>\n                            <Dropdown.Item>Action</Dropdown.Item>\n                            <Dropdown.Item>Another action</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropdownWithText = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Text</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Place any freeform text within a dropdown menu with text and use spacing utilities. Note that\n                        you’ll likely need additional sizing styles to constrain the menu width.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle>Text Dropdown</Dropdown.Toggle>\n                        <Dropdown.Menu className=\"p-3 text-muted\" style={{ maxWidth: '200px' }}>\n                            <p>Some example text that's free-flowing within the dropdown menu.</p>\n                            <p className=\"mb-0\">And this is more example text.</p>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst CustomDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Forms</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Put a form within a dropdown menu, or make it into a dropdown menu, and use margin or padding\n                        utilities to give it the negative space you require.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Form</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <form className=\"px-4 py-3\">\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"exampleDropdownFormEmail1\" className=\"form-label\">\n                                        Email address\n                                    </label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"exampleDropdownFormEmail1\"\n                                        placeholder=\"email@example.com\"\n                                    />\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"exampleDropdownFormPassword1\" className=\"form-label\">\n                                        Password\n                                    </label>\n                                    <input\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        id=\"exampleDropdownFormPassword1\"\n                                        placeholder=\"Password\"\n                                    />\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"form-check\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" id=\"dropdownCheck\" />\n                                        <label className=\"form-check-label\" htmlFor=\"dropdownCheck\">\n                                            Remember me\n                                        </label>\n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    Sign in\n                                </button>\n                            </form>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">New around here? Sign up</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"4\">Forgot password?</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst Dropdowns = (): React$Element<React$FragmentType> => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/dropdowns' },\n                    { label: 'Dropdowns', path: '/ui/dropdowns', active: true },\n                ]}\n                title={'Dropdowns'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <SingleButtonDropdown />\n                    <ColorVariantButtonDropdown />\n                    <AnimatedButtonDropdown />\n                    <DropupVariationDropdowns />\n                    <DropendVariationDropdowns />\n                    <DisabledItemDropdown />\n                    <DropdownWithText />\n                </Col>\n\n                <Col lg={6}>\n                    <DropdownMenuAlignment />\n                    <SplitColorVariantButtonDropdown />\n                    <ButtonDropdownSizes />\n                    <DropstartVariationDropdowns />\n                    <ActiveItemDropdown />\n                    <DropdownWithHeader />\n                    <CustomDropdown />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default Dropdowns;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb className=\"m-0\">\n                            <Breadcrumb.Item href=\"/\">Hyper</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst defaultProps = {\n  noGutters: false\n};\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  noGutters,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, noGutters && 'no-gutters', ...classes)\n  });\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'col');\n  const spans = [];\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span = true,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${prefix}${infix}` : `${prefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    className: classNames(className, ...spans, ...classes)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport SafeAnchor from './SafeAnchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  active: false,\n  linkProps: {}\n};\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = SafeAnchor,\n  linkProps,\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, { ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  label: 'breadcrumb',\n  listProps: {}\n};\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps,\n  children,\n  label,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", { ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.defaultProps = defaultProps;\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import ReactDOM from 'react-dom';\nexport default function safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n\n  return componentOrElement != null ? componentOrElement : null;\n}","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n})]);","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;"],"sourceRoot":""}