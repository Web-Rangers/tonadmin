{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","pages/analytics/BleedRate.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","Constructor","protoProps","staticProps","prototype","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","createWithBsPrefix","prefix","displayName","Component","defaultProps","BsComponent","React","ref","className","bsPrefix","as","Tag","resolvedPrefix","useBootstrapPrefix","_jsx","classNames","api","APICore","BleedRate","apexBarChartOpts","grid","padding","left","right","noData","text","chart","height","type","parentHeightOffset","toolbar","show","dataLabels","enabled","stroke","curve","width","zoom","legend","colors","xaxis","trim","tickAmount","tooltip","axisBorder","yaxis","labels","formatter","val","toFixed","offsetX","fill","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","state","apexBarChartData","name","data","loading","labelsArray","updateChart","period","a","chartData","get","window","location","protocol","response","JSON","parse","start","meta","step","item","push","Date","setState","isActiveChart","style","minHeight","Body","onClick","position","top","display","animationData","stonksAnimation","options","series"],"mappings":"uGAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,OA/BZ,mC,iCCAA,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWtB,IAAKsB,IAInC,SAASM,EAAaC,EAAaC,EAAYC,GAG5D,OAFID,GAAYb,EAAkBY,EAAYG,UAAWF,GACrDC,GAAad,EAAkBY,EAAaE,GACzCF,EAbT,mC,uGCAII,EAAU,Q,0DCMRC,EAAa,SAAAC,GAAG,OAAIA,EAAI,GAAGC,eDLAC,ECKyBF,EDJjDE,EAAOC,QAAQL,GAAS,SAAUM,EAAGC,GAC1C,OAAOA,EAAIJ,kBCGgDK,MAAM,GDLtD,IAAkBJ,GCQlB,SAASK,EAAmBC,GAInC,6DAAJ,GAAI,IAHNC,mBAGM,MAHQV,EAAWS,GAGnB,EAFNE,EAEM,EAFNA,UACAC,EACM,EADNA,aAEMC,EAA2BC,cAAiB,WAK/CC,GAAQ,IAJTC,EAIS,EAJTA,UACAC,EAGS,EAHTA,SAGS,IAFTC,GAAIC,OAEK,MAFCR,GAAa,MAEd,EADN1B,EACM,iBACHmC,EAAiBC,YAAmBJ,EAAUR,GACpD,OAAoBa,cAAKH,EAAD,aACtBJ,IAAKA,EACLC,UAAWO,IAAWP,EAAWI,IAC9BnC,OAKP,OAFA4B,EAAYD,aAAeA,EAC3BC,EAAYH,YAAcA,EACnBG,I,qMCpBHW,EAAM,IAAIC,IAEVC,E,kDACJ,WAAYzC,GAAO,IAAD,sBAGhB,IAEI0C,EAAmB,CACnBC,KAAM,CACFC,QAAS,CACLC,KAAM,EACNC,MAAO,IAGfC,OAAQ,CACNC,KAAM,WAERC,MAAO,CACHC,OAAQ,IACRC,KAAM,OACNC,mBAAoB,EACpBC,QAAS,CACLC,MAAM,IAGdC,WAAY,CACRC,SAAS,GAEbC,OAAQ,CACJC,MAAO,WACPC,MAAO,GAEXC,KAAM,CACFJ,SAAS,GAEbK,OAAQ,CACJP,MAAM,GAEVQ,OAjCW,CAAC,WAkCZC,MAAO,CACHZ,KAAM,WACNa,MAAM,EACNC,WAAY,GACZC,QAAS,CACLV,SAAS,GAEbW,WAAY,CACRb,MAAM,IAGdc,MAAO,CACHC,OAAQ,CACJC,UAAW,SAAUC,GACjB,OAAOA,EAAIC,QAAQ,GAAK,QAE5BC,SAAU,KAGlBC,KAAM,CACFvB,KAAM,WACNwB,SAAU,CACNxB,KAAM,WACNyB,eAAgB,EAChBC,eAAe,EACfC,YAAa,IACbC,UAAW,GACXC,MAAO,CAAC,GAAI,QAhER,OAChB,cAAMhF,IA2EDiF,MAAQ,CACXC,iBARqB,CACnB,CACIC,KAAM,YACNC,KAAM,KAMZ1C,mBACA2C,SAAS,EACTC,YAAa,IAhFC,E,qDAsFlB,WACE9F,KAAK+F,YAAY,Y,gEAGnB,WAAkBC,GAAlB,sBAAAC,EAAA,sDACMC,EAAY,GAChBnD,EAAIoD,IAAIC,OAAOC,SAASC,SAAW,8CAA8CN,EAAS,SAASpG,MAAK,SAAA2G,GACtG,IADkH,EAC9GX,EAAOY,KAAKC,MAAMF,EAASX,KAAKjE,QAAQ,YAAY,KACpD+E,EAAQd,EAAKe,KAAKD,MAClBE,EAAOhB,EAAKe,KAAKC,KAH6F,cAIlGhB,EAAKA,MAJ6F,IAIlH,IAAI,EAAJ,qBAA0B,CAAC,IAAnBiB,EAAkB,QACrBA,EAAK,IACNX,EAAUY,KAAK,CAAC,EAAK,IAAIC,KAAa,IAARL,GAAe,EAAMG,EAAK,KAE1DH,GAASE,GARuG,8BAWlH,IAAIlB,EAAmB,CACnB,CACIC,KAAM,kBACNC,KAAMM,IAId,EAAKc,SAAS,CAACtB,mBAAkBuB,cAAejB,EAAQH,SAAS,OApBrE,2C,2EA2BA,WAAS,IAAD,OACN,EAAuC7F,KAAKyF,MAA/BwB,GAAb,EAAOnD,KAAP,EAAamD,eAAepB,EAA5B,EAA4BA,QAC5B,OACI,cAAC,IAAD,CAAMtD,UAAU,aAAa2E,MAAO,CAACC,UAAW,KAAhD,SACI,eAAC,IAAKC,KAAN,WACI,qBAAI7E,UAAU,iCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,wBAAQA,UAAS,mBAA+B,QAAjB0E,EAA0B,SAAW,cAAgBI,QAAS,kBAAM,EAAKtB,YAAY,SAApH,kBAIJ,oBAAIxD,UAAU,WAAd,SACI,wBAAQA,UAAS,mBAA+B,SAAjB0E,EAA2B,SAAW,cAAgBI,QAAS,kBAAM,EAAKtB,YAAY,UAArH,kBAIJ,oBAAIxD,UAAU,WAAd,SACI,wBAAQA,UAAS,mBAA+B,UAAjB0E,EAA4B,SAAW,cAAgBI,QAAS,kBAAM,EAAKtB,YAAY,WAAtH,kBAIJ,oBAAIxD,UAAU,WAAd,SACI,wBAAQA,UAAS,mBAA+B,UAAjB0E,EAA4B,SAAW,cAAgBI,QAAS,kBAAM,EAAKtB,YAAY,WAAtH,kBAIJ,oBAAIxD,UAAU,WAAd,SACI,wBAAQA,UAAS,mBAA+B,WAAjB0E,EAA6B,SAAW,cAAgBI,QAAS,kBAAM,EAAKtB,YAAY,YAAvH,qBAKLF,EACC,qBAAKqB,MAAO,CAACI,SAAU,WAAYjE,KAAM,mBAAoBkE,IAAK,oBAAlE,SACE,cAAC,IAAD,CAAQL,MAAO,CAAC/C,MAAO,IAAKqD,QAAS,gBAAiBC,cAAeC,MAIvE,cAAC,IAAD,CACIC,QAAS3H,KAAKyF,MAAMvC,iBACpB0E,OAAQ5H,KAAKyF,MAAMC,iBACnB/B,KAAK,OACLpB,UAAU,mBACVmB,OAAQ,e,GAjKRrB,IAAMH,WA0Kfe","file":"static/js/31.02183fe4.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","// @flow\nimport React from 'react';\nimport Chart from 'react-apexcharts';\nimport { Card } from 'react-bootstrap';\nimport Lottie from \"lottie-react\";\nimport stonksAnimation from \"../../assets/stonks.json\";\n\nimport { APICore } from '../../helpers/api/apiCore';\n\nconst api = new APICore();\n\nclass BleedRate extends React.Component{\n  constructor(props){\n    super(props);\n\n    const colors = ['#0088CC'];\n\n    let apexBarChartOpts = {\n        grid: {\n            padding: {\n                left: 0,\n                right: 0,\n            },\n        },\n        noData: {\n          text: 'No Data'\n        },\n        chart: {\n            height: 550,\n            type: 'area',\n            parentHeightOffset: 0,\n            toolbar: {\n                show: false,\n            },\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2,\n        },\n        zoom: {\n            enabled: false,\n        },\n        legend: {\n            show: false,\n        },\n        colors: colors,\n        xaxis: {\n            type: 'datetime',\n            trim: true,\n            tickAmount: 20,\n            tooltip: {\n                enabled: false,\n            },\n            axisBorder: {\n                show: false,\n            },\n        },\n        yaxis: {\n            labels: {\n                formatter: function (val) {\n                    return val.toFixed(1) + ' TPS';\n                },\n                offsetX: -15,\n            },\n        },\n        fill: {\n            type: 'gradient',\n            gradient: {\n                type: 'vertical',\n                shadeIntensity: 1,\n                inverseColors: false,\n                opacityFrom: 0.45,\n                opacityTo: 0.1,\n                stops: [45, 100],\n            },\n        },\n    };\n\n    let apexBarChartData = [\n        {\n            name: 'BleedRate',\n            data: [],\n        },\n    ];\n\n    this.state = {\n      apexBarChartData,\n      apexBarChartOpts,\n      loading: true,\n      labelsArray: []\n    }\n  }\n\n\n\n  componentDidMount(){\n    this.updateChart('3month')\n  }\n\n  async updateChart(period){\n    let chartData = []\n    api.get(window.location.protocol + \"//ton.swisscops.com/statistics/jsons/bleed_\"+period + '.json').then(response => {\n      let data = JSON.parse(response.data.replace(/[\\n\\r\\t]/g,\"\"));\n      let start = data.meta.start;\n      let step = data.meta.step;\n      for(let item of data.data){\n        if(item[0]){\n          chartData.push({'x': new Date(start * 1000), 'y' : item[0]})\n        }\n        start += step;\n      }\n\n      let apexBarChartData = [\n          {\n              name: 'TONs per Second',\n              data: chartData,\n          },\n      ];\n\n      this.setState({apexBarChartData, isActiveChart: period, loading: false})\n    })\n\n  }\n\n\n\n  render(){\n    const {show, isActiveChart, loading} = this.state;\n    return (\n        <Card className=\"card-h-100\" style={{minHeight: 600}}>\n            <Card.Body>\n                <ul className=\"nav float-end d-none d-lg-flex\">\n                    <li className=\"nav-item\">\n                        <button className={`nav-link ${isActiveChart == '1day' ? \"active\" : \"text-muted\"}`} onClick={() => this.updateChart('1day') }>\n                            1d\n                        </button>\n                    </li>\n                    <li className=\"nav-item\">\n                        <button className={`nav-link ${isActiveChart == '1week' ? \"active\" : \"text-muted\"}`} onClick={() => this.updateChart('1week') } >\n                            7d\n                        </button>\n                    </li>\n                    <li className=\"nav-item\">\n                        <button className={`nav-link ${isActiveChart == '1month' ? \"active\" : \"text-muted\"}`} onClick={() => this.updateChart('1month') } >\n                            1m\n                        </button>\n                    </li>\n                    <li className=\"nav-item\">\n                        <button className={`nav-link ${isActiveChart == '3month' ? \"active\" : \"text-muted\"}`} onClick={() => this.updateChart('3month') } >\n                            3m\n                        </button>\n                    </li>\n                    <li className=\"nav-item\">\n                        <button className={`nav-link ${isActiveChart == '6months' ? \"active\" : \"text-muted\"}`} onClick={() => this.updateChart('6months') } >\n                            6m\n                        </button>\n                    </li>\n                </ul>\n                  {loading ?\n                    <div style={{position: \"absolute\", left: \"calc(50% - 50px)\", top: \"calc(50% - 50px)\"}}>\n                      <Lottie style={{width: 100, display: 'inline-block'}} animationData={stonksAnimation} />\n                      {/*<Spinner color=\"light\" type=\"grow\" />*/}\n                    </div>\n                    :\n                    <Chart\n                        options={this.state.apexBarChartOpts}\n                        series={this.state.apexBarChartData}\n                        type=\"area\"\n                        className=\"apex-charts mt-3\"\n                        height={550}\n                    />\n                  }\n            </Card.Body>\n        </Card>\n    );\n  }\n};\n\nexport default BleedRate;\n"],"sourceRoot":""}