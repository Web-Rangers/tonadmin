{"version":3,"sources":["components/Spinner.js","pages/UpdateCenter/index.js"],"names":["Spinner","props","children","Tag","tag","color","size","role","className","classNames","type","defaultProps","api","APICore","UpdateCenter","useState","Date","status","setStatus","updateStatus","localStorage","getItem","show","setShow","showToast","setShowToast","useEffect","a","getStatus","sendJRPC","result","data","closeToast","setItem","style","width","onClose","Body","variant","onClick","lg","id","count","onHide","disabled","loop","animationData","boomstickAnimation","oopsAnimation"],"mappings":"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","file":"static/js/29.3436aab3.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype SpinnerProps = {\n    tag?: string,\n    className?: string,\n    size?: 'lg' | 'md' | 'sm',\n    type?: 'bordered' | 'grow',\n    color?: string,\n    children?: any,\n};\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps): React$Element<any> => {\n    const children = props.children || null;\n    const Tag = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                { 'spinner-border': props.type === 'bordered', 'spinner-grow': props.type === 'grow' },\n                [`text-${color}`],\n                { [`avatar-${size}|`]: size },\n                props.className\n            )}>\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n","// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, Modal, Button, Toast } from 'react-bootstrap';\nimport Spinner from '../../components/Spinner';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { APICore } from '../../helpers/api/apiCore';\nimport boomstickAnimation from \"../../assets/boomstick.json\";\nimport oopsAnimation from \"../../assets/oops.json\";\nimport Lottie from \"lottie-react\";\n\nconst api = new APICore();\nconst UpdateCenter = (): React$Element<React$FragmentType> => {\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [status, setStatus] = useState(0);\n    const [updateStatus, setUpdateStatus] = useState(null);\n    const [statusdata, setStatusdata] = useState(0);\n    const [validatorAddress, setValidatorAddress] = useState(localStorage.getItem('validatorAddress'));\n    const [show, setShow] = useState(false);\n    //const [showToast, setShowToast] = useState(Boolean(localStorage.getItem('updateToast')));\n    const [showToast, setShowToast] = useState(true);\n    useEffect(async () => {\n        getStatus()\n    }, []);\n\n    const getStatus = async () => {\n      setStatus(false)\n      const result = await api.sendJRPC('/', 'CheckUpdates')\n      //  setStatus([null, null])\n      \n      setStatus(result.data.result)\n\n      if(!result){\n        setStatus([null, null])\n      }\n    }\n\n    const update = async (service) => {\n      setUpdateStatus(null);\n      setShow(true)\n      const result = await api.sendJRPC('/', 'Update' + service, ['']);\n\n      if(result.data.message == 'Method not found\"}}' ){\n        setStatus([null, null])\n      }\n      const result2 = await api.sendJRPC('/', 'CheckUpdates')\n      if(result.data.result == 'Update - {green}OK{endc}'){\n        setUpdateStatus(true)\n      }else{\n        setUpdateStatus(false)\n      }\n\n      setStatus(false)\n\n    }\n\n    const closeToast = () => {\n      let toast = localStorage.setItem('updateToast', 'true')\n      setShowToast(true)\n    }\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <h4 className=\"page-title mb-3\" >Update center</h4>\n                    <div className=\"page-title-box\">\n\n                        <Toast\n                        className=\"d-flex align-items-center text-white bg-primary border-0 mb-3\"\n                        style={{ width: '100%'}}\n                        show={!showToast}\n                        onClose={() => closeToast()}\n                        >\n                        <Toast.Body>Update center allows you to upgrade the validator software directly from TonAdmin without having to install updates from the MyTonCtrl console.</Toast.Body>\n                        <Button\n                          variant=\"\"\n                          onClick={() => closeToast()}\n                          className=\"btn-close btn-close-white ms-auto me-2\"></Button>\n                      </Toast>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={6}>\n                  {!status ?\n                    <Card className=\"tilebox-one\">\n                      <Card.Body>\n                          <Skeleton count={5} />\n                      </Card.Body>\n                    </Card>\n                    :\n                    <>\n                    {(status[0] != null && status[1] != null) ?\n                    <Card className=\"tilebox-one\">\n                        <Card.Body>\n                            <h4 className=\"mt-0\">MyTonCtrl</h4>\n                            <h3 className=\"my-3\" id=\"active-users-count\">\n                                {!status[1] ?\n                                  <>Nothing to update</>\n                                  :\n                                  <>Update required</>\n                                }\n                            </h3>\n                          {/*  {status[1] == true ?\n                            <button onClick={() => update('MTC')} className=\"btn btn-primary\">Update</button>\n                            : ''}*/}\n                        </Card.Body>\n                    </Card>\n                    :\n                    <Card className=\"tilebox-one\">\n                        <Card.Body>\n                            <h3 className=\"mt-0\">Update center is not available</h3>\n                            <h5 className=\"my-3\" id=\"active-users-count\">\n                              Please upgrade JR module in MytonCtrl to be able to get updates from TonAdmin.\n                            </h5>\n                            <p>\n                              To upgrade JR module run MyTonCtrl on your validator server and upgrade JR:\n                            </p>\n                              <code>\n                                > MyTonCtrl\n                                <br/>\n                                MyTonCtrl > installer\n                                <br/>\n                                MyTonInstaller > enable JR\n                              </code>\n\n                        </Card.Body>\n                    </Card>\n                    }\n                    </>\n                  }\n                </Col>\n\n                <Col lg={6}>\n                  {!status ?\n                    <Card className=\"tilebox-one\">\n                      <Card.Body>\n                          <Skeleton count={5} />\n                      </Card.Body>\n                    </Card>\n                    :\n                    <>\n                    {(status[0] != null && status[1] != null) ?\n                    <Card className=\"tilebox-one\">\n                        <Card.Body>\n                            <h4 className=\"mt-0\">MyTon JSONRPC</h4>\n                            <h3 className=\"my-3\" id=\"active-users-count\">\n                              {!status[0] ?\n                                <>Nothing to update</>\n                                :\n                                <>Update required</>\n                              }\n                            </h3>\n                          {/*  {status[0] == true ?\n                            <button onClick={() => update('JR')} className=\"btn btn-primary\">Update</button>\n                            : ''}*/}\n                        </Card.Body>\n                    </Card>\n                    : '' }\n                    </>\n                  }\n                </Col>\n            </Row>\n            <Modal show={show} onHide={() => {setShow(!show); }} className=\"bg-modal-dialog-centered\">\n              <Modal.Body className=\"text-center\">\n                {status ?\n                  <span>\n                    <h4>Updating in progress..</h4>\n                    <Button color=\"primary\" className=\"mt-2\" disabled>\n                        <Spinner className=\"spinner-border-sm me-1\" tag=\"span\" color=\"white\" />\n                        Loading...\n                    </Button>\n                  </span>\n                  :\n                  <>\n                  {updateStatus ?\n                    <>\n                      <h4>Successfully updated</h4>\n                      <Lottie className=\"lottie-modal\" loop={true} animationData={boomstickAnimation} />\n                      <br/>\n                      <Button color=\"primary\" className=\"mt-3\" onClick={() => {setShow(!show); getStatus()}}>\n                          Great\n                      </Button>\n                    </>\n                  :\n                  <>\n                    <h5>Something went wrong. Please try later or update manually.</h5>\n                    <Lottie className=\"lottie-modal\" animationData={oopsAnimation} />\n                    <br/>\n                    <Button color=\"primary\" className=\"mt-3\" onClick={() => {setShow(!show);  getStatus()}}>\n                        Ok\n                    </Button>\n                  </>\n                }\n                </>\n                }\n              </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default UpdateCenter;\n"],"sourceRoot":""}