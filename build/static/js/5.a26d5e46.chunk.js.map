{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../node_modules/warning/warning.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormCheckInput.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormCheckLabel.js","../node_modules/react-bootstrap/esm/FormCheck.js","../node_modules/react-bootstrap/esm/FormControl.js","../node_modules/react-bootstrap/esm/FormFloating.js","../node_modules/react-bootstrap/esm/FormGroup.js","../node_modules/react-bootstrap/esm/FormLabel.js","../node_modules/react-bootstrap/esm/FormRange.js","../node_modules/react-bootstrap/esm/FormSelect.js","../node_modules/react-bootstrap/esm/FormText.js","../node_modules/react-bootstrap/esm/Switch.js","../node_modules/react-bootstrap/esm/FloatingLabel.js","../node_modules/react-bootstrap/esm/Form.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","current","isObject","Object","keys","length","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","omit","ref","focus","refs","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","target","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","isValid","validResult","options","option","checked","map","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","isMessage","validationData","isRegex","a","required","maxLength","minLength","min","max","pattern","validate","inputValue","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","Subscription","tearDowns","tearDown","this","push","teardown","Subscriber","observer","subscription","closed","add","next","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","formStateSubjectRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","setFormState","formStateRef","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getFormIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","names","currentNames","validateForm","fieldError","Promise","all","setInternalValues","inputKey","fieldName","isFieldWatched","has","updateValidAndValue","isWithinRefCallback","useFormDefaultValue","then","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","getNodeParentName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","subscribe","info","unregister","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","onChange","onBlur","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","control","getProxyFormState","warning","module","exports","React","FormCheckInput","id","bsPrefix","className","isInvalid","as","Component","props","controlId","useContext","useBootstrapPrefix","_jsx","classNames","propTypes","PropTypes","string","tooltip","bool","elementType","Feedback","FormCheckLabel","htmlFor","FormCheck","bsSwitchPrefix","inline","feedbackTooltip","feedback","style","title","label","children","innerFormContext","useMemo","hasLabel","Provider","_jsxs","_Fragment","assign","Input","Label","FormControl","classes","size","htmlSize","plaintext","readOnly","createWithBsPrefix","FormGroup","FormLabel","column","visuallyHidden","columnClass","Col","defaultProps","FormRange","FormSelect","FormText","muted","Switch","FloatingLabel","_ref","any","validated","Form","Group","Control","Floating","FormFloating","Check","Text","Range","Select","InputGroupText","InputGroup","hasValidation","contextValue","InputGroupContext","Radio","Checkbox"],"mappings":"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","file":"static/js/5.a26d5e46.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetFormIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getFormIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    isWithinRefCallback?: boolean,\n  ) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n    const useFormDefaultValue = get(defaultValuesRef.current, name);\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? useFormDefaultValue\n        : field._f.value;\n\n      if (!isNullOrUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (\n      (useFormDefaultValue || (!useFormDefaultValue && isWithinRefCallback)) &&\n      options &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid &&\n          !isEmptyObject(error) &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        ref === field._f.ref ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n        (isRadioOrCheckbox &&\n          Array.isArray(field._f.refs) &&\n          compact(field._f.refs).find((option) => option === ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValidAndValue(name, options, true);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import * as React from 'react'; // TODO\n\nconst FormContext = /*#__PURE__*/React.createContext({});\nexport default FormContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormCheckInput = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  className,\n  type = 'checkbox',\n  isValid = false,\n  isInvalid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    type: type,\n    id: id || controlId,\n    className: classNames(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')\n  });\n});\nFormCheckInput.displayName = 'FormCheckInput';\nexport default FormCheckInput;","import classNames from 'classnames';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  as: Component = 'div',\n  className,\n  type = 'valid',\n  tooltip = false,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\n  ref: ref,\n  className: classNames(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)\n}));\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormCheckLabel = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  htmlFor,\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-label');\n  return /*#__PURE__*/_jsx(\"label\", { ...props,\n    ref: ref,\n    htmlFor: htmlFor || controlId,\n    className: classNames(className, bsPrefix)\n  });\n});\nFormCheckLabel.displayName = 'FormCheckLabel';\nexport default FormCheckLabel;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  bsSwitchPrefix,\n  inline = false,\n  disabled = false,\n  isValid = false,\n  isInvalid = false,\n  feedbackTooltip = false,\n  feedback,\n  className,\n  style,\n  title = '',\n  type = 'checkbox',\n  label,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as = 'input',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n  const {\n    controlId\n  } = useContext(FormContext);\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = label != null && label !== false && !children;\n\n  const input = /*#__PURE__*/_jsx(FormCheckInput, { ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: innerFormContext,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: classNames(className, label && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix),\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\n          title: title,\n          children: label\n        }), (isValid || isInvalid) && /*#__PURE__*/_jsx(Feedback, {\n          type: isValid ? 'valid' : 'invalid',\n          tooltip: feedbackTooltip,\n          children: feedback\n        })]\n      })\n    })\n  });\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  type,\n  size,\n  htmlSize,\n  id,\n  className,\n  isValid = false,\n  isInvalid = false,\n  plaintext,\n  readOnly,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  let classes;\n\n  if (plaintext) {\n    classes = {\n      [`${bsPrefix}-plaintext`]: true\n    };\n  } else {\n    classes = {\n      [bsPrefix]: true,\n      [`${bsPrefix}-${size}`]: size\n    };\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)\n  });\n});\nFormControl.displayName = 'FormControl';\nexport default Object.assign(FormControl, {\n  Feedback\n});","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('form-floating');","import * as React from 'react';\nimport { useMemo } from 'react';\nimport FormContext from './FormContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormGroup = /*#__PURE__*/React.forwardRef(({\n  controlId,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const context = useMemo(() => ({\n    controlId\n  }), [controlId]);\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: context,\n    children: /*#__PURE__*/_jsx(Component, { ...props,\n      ref: ref\n    })\n  });\n});\nFormGroup.displayName = 'FormGroup';\nexport default FormGroup;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Col from './Col';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  column: false,\n  visuallyHidden: false\n};\nconst FormLabel = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'label',\n  bsPrefix,\n  column,\n  visuallyHidden,\n  className,\n  htmlFor,\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-label');\n  let columnClass = 'col-form-label';\n  if (typeof column === 'string') columnClass = `${columnClass} ${columnClass}-${column}`;\n  const classes = classNames(className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.') : void 0;\n  htmlFor = htmlFor || controlId;\n  if (column) return /*#__PURE__*/_jsx(Col, {\n    as: \"label\",\n    className: classes,\n    htmlFor: htmlFor,\n    ...props\n  });\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control\n    _jsx(Component, {\n      ref: ref,\n      className: classes,\n      htmlFor: htmlFor,\n      ...props\n    })\n  );\n});\nFormLabel.displayName = 'FormLabel';\nFormLabel.defaultProps = defaultProps;\nexport default FormLabel;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormRange = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-range');\n  return /*#__PURE__*/_jsx(\"input\", { ...props,\n    type: \"range\",\n    ref: ref,\n    className: classNames(className, bsPrefix)\n  });\n});\nFormRange.displayName = 'FormRange';\nexport default FormRange;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormSelect = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  htmlSize,\n  className,\n  isValid = false,\n  isInvalid = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-select');\n  return /*#__PURE__*/_jsx(\"select\", { ...props,\n    size: htmlSize,\n    ref: ref,\n    className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`)\n  });\n});\nFormSelect.displayName = 'FormSelect';\nexport default FormSelect;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormText = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  as: Component = 'small',\n  muted,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-text');\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix, muted && 'text-muted')\n  });\n});\nFormText.displayName = 'FormText';\nexport default FormText;","import * as React from 'react';\nimport FormCheck from './FormCheck';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Switch = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(FormCheck, { ...props,\n  ref: ref,\n  type: \"switch\"\n}));\nSwitch.displayName = 'Switch';\nexport default Object.assign(Switch, {\n  Input: FormCheck.Input,\n  Label: FormCheck.Label\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport FormGroup from './FormGroup';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FloatingLabel = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  controlId,\n  label,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-floating');\n  return /*#__PURE__*/_jsxs(FormGroup, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    controlId: controlId,\n    ...props,\n    children: [children, /*#__PURE__*/_jsx(\"label\", {\n      htmlFor: controlId,\n      children: label\n    })]\n  });\n});\nFloatingLabel.displayName = 'FloatingLabel';\nexport default FloatingLabel;","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport FormCheck from './FormCheck';\nimport FormControl from './FormControl';\nimport FormFloating from './FormFloating';\nimport FormGroup from './FormGroup';\nimport FormLabel from './FormLabel';\nimport FormRange from './FormRange';\nimport FormSelect from './FormSelect';\nimport FormText from './FormText';\nimport Switch from './Switch';\nimport FloatingLabel from './FloatingLabel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * The Form `ref` will be forwarded to the underlying element,\n   * which means, unless it's rendered `as` a composite component,\n   * it will be a DOM node, when resolved.\n   *\n   * @type {ReactRef}\n   * @alias ref\n   */\n  _ref: PropTypes.any,\n\n  /**\n   * Mark a form as having been validated. Setting it to `true` will\n   * toggle any validation styles on the forms elements.\n   */\n  validated: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Form = /*#__PURE__*/React.forwardRef(({\n  className,\n  validated,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'form',\n  ...props\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\n  ref: ref,\n  className: classNames(className, validated && 'was-validated')\n}));\nForm.displayName = 'Form';\nForm.propTypes = propTypes;\nexport default Object.assign(Form, {\n  Group: FormGroup,\n  Control: FormControl,\n  Floating: FormFloating,\n  Check: FormCheck,\n  Switch,\n  Label: FormLabel,\n  Text: FormText,\n  Range: FormRange,\n  Select: FormSelect,\n  FloatingLabel\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"sourceRoot":""}