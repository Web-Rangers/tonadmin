{"version":3,"sources":["../node_modules/react-bootstrap/esm/SelectableContext.js","../node_modules/react-overlays/esm/DropdownContext.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/react-bootstrap/esm/NavContext.js","../node_modules/@restart/hooks/esm/useForceUpdate.js","../node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/react-bootstrap/esm/NavbarContext.js","../node_modules/react-bootstrap/esm/DropdownContext.js","../node_modules/react-overlays/esm/DropdownMenu.js","../node_modules/react-overlays/esm/DropdownToggle.js","../node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js","../node_modules/react-bootstrap/esm/DropdownToggle.js","../node_modules/react-bootstrap/esm/DropdownMenu.js","../node_modules/dom-helpers/esm/matches.js","../node_modules/@restart/hooks/esm/useGlobalListener.js","../node_modules/@restart/hooks/esm/useEventListener.js","../node_modules/react-overlays/esm/Dropdown.js","../node_modules/react-bootstrap/esm/DropdownItem.js","../node_modules/react-bootstrap/esm/Dropdown.js"],"names":["SelectableContext","React","makeEventKey","eventKey","href","String","DropdownContext","createContext","Button","ref","bsPrefix","variant","size","active","className","type","as","props","prefix","useBootstrapPrefix","classes","classNames","_jsx","SafeAnchor","disabled","Component","displayName","defaultProps","toArray","Function","prototype","bind","call","slice","qsa","element","selector","querySelectorAll","NavContext","useForceUpdate","useReducer","state","usePrevious","value","useRef","useEffect","current","context","noop","useDropdownMenu","options","useContext","_useCallbackRef","useCallbackRef","arrowElement","attachArrowRef","hasShownRef","_options","flip","offset","rootCloseEvent","_options$fixed","fixed","_options$popperConfig","popperConfig","_options$usePopper","usePopper","shouldUsePopper","show","alignEnd","_ref","drop","setMenu","menuElement","toggleElement","placement","popper","mergeOptionsWithPopperConfig","enabled","enableEvents","menuProps","_extends","id","attributes","style","styles","metadata","hasShown","toggle","arrowProps","arrow","useRootClose","e","clickTrigger","propTypes","children","PropTypes","func","isRequired","bool","oneOf","object","string","DropdownMenu","_ref2","_useDropdownMenu","_objectWithoutPropertiesLoose","meta","createElement","Fragment","useDropdownToggle","_ref$show","_ref$toggle","setToggle","handleClick","useCallback","onClick","DropdownToggle","_useDropdownToggle","useWrappedRefWithWarning","componentName","split","childBsPrefix","dropdownContext","isInputGroup","InputGroupContext","undefined","toggleProps","useMergedRefs","align","showProps","renderOnMount","alignRight","isNavbar","NavbarContext","contextAlign","alignClasses","keys","Object","length","brkPoint","direction","push","close","matchesImpl","useGlobalListener","event","handler","capture","eventTarget","listener","useEventCallback","target","addEventListener","removeEventListener","useEventListener","document","node","focusFirstItemOnShow","itemSelector","defaultShow","onToggle","useRefWithUpdate","forceUpdate","attachRef","Dropdown","rawShow","rawOnToggle","_ref$itemSelector","_useUncontrolledProp","useUncontrolledProp","_useRefWithUpdate","menuRef","_useRefWithUpdate2","toggleRef","lastShow","lastSourceEvent","focusInDropdown","nextShow","useMemo","contains","activeElement","focusToggle","focus","maybeFocusFirst","focusType","body","nativeMatch","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","n","s","test","first","getNextFocusedChild","items","index","indexOf","Math","max","min","_menuRef$current","_toggleRef$current","key","fromMenu","fromToggle","tagName","next","preventDefault","_next","stopPropagation","Provider","Menu","Toggle","DropdownItem","onSelect","propActive","onSelectCtx","activeKey","DropdownHeader","createWithBsPrefix","role","DropdownDivider","DropdownItemText","pProps","useUncontrolled","navbar","handleToggle","source","currentTarget","handleSelect","contextValue","BaseDropdown","assign","Item","ItemText","Divider","Header"],"mappings":"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","file":"static/js/5.b943b96f.chunk.js","sourcesContent":["import * as React from 'react';\nconst SelectableContext = /*#__PURE__*/React.createContext(null);\nexport const makeEventKey = (eventKey, href = null) => {\n  if (eventKey != null) return String(eventKey);\n  return href || null;\n};\nexport default SelectableContext;","import React from 'react';\nvar DropdownContext = /*#__PURE__*/React.createContext(null);\nexport default DropdownContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport SafeAnchor from './SafeAnchor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  type,\n  as,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const classes = classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`);\n\n  if (props.href) {\n    return /*#__PURE__*/_jsx(SafeAnchor, { ...props,\n      as: as,\n      ref: ref,\n      className: classNames(classes, props.disabled && 'disabled')\n    });\n  }\n\n  if (!type && !as) {\n    type = 'button';\n  }\n\n  const Component = as || 'button';\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    type: type,\n    className: classes\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","import * as React from 'react';\nconst NavContext = /*#__PURE__*/React.createContext(null);\nNavContext.displayName = 'NavContext';\nexport default NavContext;","import { useReducer } from 'react';\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\n\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = useReducer(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import * as React from 'react'; // TODO: check\n\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'NavbarContext';\nexport default context;","import * as React from 'react';\nconst DropdownContext = /*#__PURE__*/React.createContext({});\nDropdownContext.displayName = 'DropdownContext';\nexport default DropdownContext;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React, { useContext, useRef } from 'react';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport DropdownContext from './DropdownContext';\nimport usePopper from './usePopper';\nimport useRootClose from './useRootClose';\nimport mergeOptionsWithPopperConfig from './mergeOptionsWithPopperConfig';\n\nvar noop = function noop() {};\n/**\n * @memberOf Dropdown\n * @param {object}  options\n * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection\n * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle\n * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`\n * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.\n * @param {string}  options.rootCloseEvent The pointer event to listen for when determining \"clicks outside\" the menu for triggering a close.\n * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.\n */\n\n\nexport function useDropdownMenu(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var context = useContext(DropdownContext);\n\n  var _useCallbackRef = useCallbackRef(),\n      arrowElement = _useCallbackRef[0],\n      attachArrowRef = _useCallbackRef[1];\n\n  var hasShownRef = useRef(false);\n  var _options = options,\n      flip = _options.flip,\n      offset = _options.offset,\n      rootCloseEvent = _options.rootCloseEvent,\n      _options$fixed = _options.fixed,\n      fixed = _options$fixed === void 0 ? false : _options$fixed,\n      _options$popperConfig = _options.popperConfig,\n      popperConfig = _options$popperConfig === void 0 ? {} : _options$popperConfig,\n      _options$usePopper = _options.usePopper,\n      shouldUsePopper = _options$usePopper === void 0 ? !!context : _options$usePopper;\n  var show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;\n  var alignEnd = (context == null ? void 0 : context.alignEnd) == null ? options.alignEnd : context.alignEnd;\n\n  if (show && !hasShownRef.current) {\n    hasShownRef.current = true;\n  }\n\n  var handleClose = function handleClose(e) {\n    context == null ? void 0 : context.toggle(false, e);\n  };\n\n  var _ref = context || {},\n      drop = _ref.drop,\n      setMenu = _ref.setMenu,\n      menuElement = _ref.menuElement,\n      toggleElement = _ref.toggleElement;\n\n  var placement = alignEnd ? 'bottom-end' : 'bottom-start';\n  if (drop === 'up') placement = alignEnd ? 'top-end' : 'top-start';else if (drop === 'right') placement = alignEnd ? 'right-end' : 'right-start';else if (drop === 'left') placement = alignEnd ? 'left-end' : 'left-start';\n  var popper = usePopper(toggleElement, menuElement, mergeOptionsWithPopperConfig({\n    placement: placement,\n    enabled: !!(shouldUsePopper && show),\n    enableEvents: show,\n    offset: offset,\n    flip: flip,\n    fixed: fixed,\n    arrowElement: arrowElement,\n    popperConfig: popperConfig\n  }));\n\n  var menuProps = _extends({\n    ref: setMenu || noop,\n    'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id\n  }, popper.attributes.popper, {\n    style: popper.styles.popper\n  });\n\n  var metadata = {\n    show: show,\n    alignEnd: alignEnd,\n    hasShown: hasShownRef.current,\n    toggle: context == null ? void 0 : context.toggle,\n    popper: shouldUsePopper ? popper : null,\n    arrowProps: shouldUsePopper ? _extends({\n      ref: attachArrowRef\n    }, popper.attributes.arrow, {\n      style: popper.styles.arrow\n    }) : {}\n  };\n  useRootClose(menuElement, handleClose, {\n    clickTrigger: rootCloseEvent,\n    disabled: !show\n  });\n  return [menuProps, metadata];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Menu element. The `props`\n   * argument should spread through to **a component that can accept a ref**.\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   alignEnd: boolean,\n   *   close: (?SyntheticEvent) => void,\n   *   placement: Placement,\n   *   update: () => void,\n   *   forceUpdate: () => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     style: { [string]: string | number },\n   *     aria-labelledby: ?string\n   *   },\n   *   arrowProps: {\n   *     ref: (?HTMLElement) => void,\n   *     style: { [string]: string | number },\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Controls the visible state of the menu, generally this is\n   * provided by the parent `Dropdown` component,\n   * but may also be specified as a prop directly.\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu to the 'end' of it's placement position.\n   * Generally this is provided by the parent `Dropdown` component,\n   * but may also be specified as a prop directly.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Enables the Popper.js `flip` modifier, allowing the Dropdown to\n   * automatically adjust it's placement in case of overlap with the viewport or toggle.\n   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info\n   */\n  flip: PropTypes.bool,\n  usePopper: PropTypes.oneOf([true, false]),\n\n  /**\n   * A set of popper options and props passed directly to react-popper's Popper component.\n   */\n  popperConfig: PropTypes.object,\n\n  /**\n   * Override the default event used by RootCloseWrapper.\n   */\n  rootCloseEvent: PropTypes.string\n};\nvar defaultProps = {\n  usePopper: true\n};\n\n/**\n * Also exported as `<Dropdown.Menu>` from `Dropdown`.\n *\n * @displayName DropdownMenu\n * @memberOf Dropdown\n */\nfunction DropdownMenu(_ref2) {\n  var children = _ref2.children,\n      options = _objectWithoutPropertiesLoose(_ref2, [\"children\"]);\n\n  var _useDropdownMenu = useDropdownMenu(options),\n      props = _useDropdownMenu[0],\n      meta = _useDropdownMenu[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, meta.hasShown ? children(props, meta) : null);\n}\n\nDropdownMenu.displayName = 'ReactOverlaysDropdownMenu';\nDropdownMenu.propTypes = propTypes;\nDropdownMenu.defaultProps = defaultProps;\n/** @component */\n\nexport default DropdownMenu;","import PropTypes from 'prop-types';\nimport React, { useContext, useCallback } from 'react';\nimport DropdownContext from './DropdownContext';\n\nvar noop = function noop() {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  var _ref = useContext(DropdownContext) || {},\n      _ref$show = _ref.show,\n      show = _ref$show === void 0 ? false : _ref$show,\n      _ref$toggle = _ref.toggle,\n      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n      setToggle = _ref.setToggle;\n\n  var handleClick = useCallback(function (e) {\n    toggle(!show, e);\n  }, [show, toggle]);\n  return [{\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired\n};\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      meta = _useDropdownToggle[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children(props, meta));\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;","import invariant from 'invariant';\nimport { useCallback } from 'react';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nexport default function useWrappedRefWithWarning(ref, componentName) {\n  // @ts-ignore\n  if (!(process.env.NODE_ENV !== \"production\")) return ref; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const warningRef = useCallback(refValue => {\n    !(refValue == null || !refValue.isReactComponent) ? process.env.NODE_ENV !== \"production\" ? invariant(false, `${componentName} injected a ref to a provided \\`as\\` component that resolved to a component instance instead of a DOM element. ` + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant(false) : void 0;\n  }, [componentName]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  return useMergedRefs(warningRef, ref);\n}","import classNames from 'classnames';\nimport isRequiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownToggle } from 'react-overlays/DropdownToggle';\nimport DropdownContext from 'react-overlays/DropdownContext';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  split,\n  className,\n  childBsPrefix,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = Button,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n  const isInputGroup = useContext(InputGroupContext);\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from 'react-overlays/DropdownMenu';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  flip: true\n};\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignRight = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n        // Reuse alignRight to toggle the class below.\n\n        alignRight = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignRight = true;\n    }\n  }\n\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    alignEnd,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    alignEnd: alignRight,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n\n    menuProps.align = align;\n  }\n\n  let style = props.style;\n\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = { ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...menuProps,\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...(alignClasses.length && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;","var matchesImpl;\nexport default function matches(node, selector) {\n  if (!matchesImpl) {\n    var body = document.body;\n    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;\n\n    matchesImpl = function matchesImpl(n, s) {\n      return nativeMatch.call(n, s);\n    };\n  }\n\n  return matchesImpl(node, selector);\n}","import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useGlobalListener(event, handler, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var documentTarget = useCallback(function () {\n    return document;\n  }, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.node,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\nfunction useRefWithUpdate() {\n  var forceUpdate = useForceUpdate();\n  var ref = useRef(null);\n  var attachRef = useCallback(function (element) {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n */\n\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var _useRefWithUpdate = useRefWithUpdate(),\n      menuRef = _useRefWithUpdate[0],\n      setMenu = _useRefWithUpdate[1];\n\n  var menuElement = menuRef.current;\n\n  var _useRefWithUpdate2 = useRefWithUpdate(),\n      toggleRef = _useRefWithUpdate2[0],\n      setToggle = _useRefWithUpdate2[1];\n\n  var toggleElement = toggleRef.current;\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (nextShow, event) {\n    onToggle(nextShow, event);\n  }, [onToggle]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', function (event) {\n    var _menuRef$current, _toggleRef$current;\n\n    var key = event.key;\n    var target = event.target;\n    var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children);\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavContext from './NavContext';\nimport SafeAnchor from './SafeAnchor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  as: SafeAnchor,\n  disabled: false\n};\nconst DropdownItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  eventKey,\n  disabled,\n  href,\n  onClick,\n  onSelect,\n  active: propActive,\n  as: Component,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-item');\n  const onSelectCtx = useContext(SelectableContext);\n  const navContext = useContext(NavContext);\n  const {\n    activeKey\n  } = navContext || {};\n  const key = makeEventKey(eventKey, href);\n  const active = propActive == null && key != null ? makeEventKey(activeKey) === key : propActive;\n  const handleClick = useEventCallback(event => {\n    // SafeAnchor handles the disabled case, but we handle it here\n    // for other components\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(event);\n    onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    onSelect == null ? void 0 : onSelect(key, event);\n  });\n  return (\n    /*#__PURE__*/\n    // \"TS2604: JSX element type 'Component' does not have any construct or call signatures.\"\n    // @ts-ignore\n    _jsx(Component, { ...props,\n      ref: ref,\n      href: href,\n      disabled: disabled,\n      className: classNames(className, prefix, active && 'active', disabled && 'disabled'),\n      onClick: handleClick\n    })\n  );\n});\nDropdownItem.displayName = 'DropdownItem';\nDropdownItem.defaultProps = defaultProps;\nexport default DropdownItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport BaseDropdown from 'react-overlays/Dropdown';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownItem from './DropdownItem';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nimport InputGroupContext from './InputGroupContext';\nimport SelectableContext from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownHeader = createWithBsPrefix('dropdown-header', {\n  defaultProps: {\n    role: 'heading'\n  }\n});\nconst DropdownDivider = createWithBsPrefix('dropdown-divider', {\n  Component: 'hr',\n  defaultProps: {\n    role: 'separator'\n  }\n});\nconst DropdownItemText = createWithBsPrefix('dropdown-item-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  navbar: false,\n  align: 'start'\n};\nconst Dropdown = /*#__PURE__*/React.forwardRef((pProps, ref) => {\n  const {\n    bsPrefix,\n    drop,\n    show,\n    className,\n    align,\n    onSelect,\n    onToggle,\n    focusFirstItemOnShow,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    navbar: _4,\n    ...props\n  } = useUncontrolled(pProps, {\n    show: 'onToggle'\n  });\n  const onSelectCtx = useContext(SelectableContext);\n  const isInputGroup = useContext(InputGroupContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown');\n  const handleToggle = useEventCallback((nextShow, event, source = event.type) => {\n    if (event.currentTarget === document && (source !== 'keydown' || event.key === 'Escape')) source = 'rootClose';\n    onToggle == null ? void 0 : onToggle(nextShow, event, {\n      source\n    });\n  });\n  const handleSelect = useEventCallback((key, event) => {\n    onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    onSelect == null ? void 0 : onSelect(key, event);\n    handleToggle(false, event, 'select');\n  }); // TODO RTL: Flip directions based on RTL setting.\n\n  let direction = drop;\n\n  if (drop === 'start') {\n    direction = 'left';\n  } else if (drop === 'end') {\n    direction = 'right';\n  }\n\n  const contextValue = useMemo(() => ({\n    align\n  }), [align]);\n  return /*#__PURE__*/_jsx(DropdownContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleSelect,\n      children: /*#__PURE__*/_jsx(BaseDropdown, {\n        drop: direction,\n        show: show,\n        alignEnd: align === 'end',\n        onToggle: handleToggle,\n        focusFirstItemOnShow: focusFirstItemOnShow,\n        itemSelector: `.${prefix}-item:not(.disabled):not(:disabled)`,\n        children: isInputGroup ? props.children : /*#__PURE__*/_jsx(Component, { ...props,\n          ref: ref,\n          className: classNames(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend', drop === 'start' && 'dropstart')\n        })\n      })\n    })\n  });\n});\nDropdown.displayName = 'Dropdown';\nDropdown.defaultProps = defaultProps;\nexport default Object.assign(Dropdown, {\n  Toggle: DropdownToggle,\n  Menu: DropdownMenu,\n  Item: DropdownItem,\n  ItemText: DropdownItemText,\n  Divider: DropdownDivider,\n  Header: DropdownHeader\n});"],"sourceRoot":""}