{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormCheckInput.js","../node_modules/react-bootstrap/esm/InputGroup.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormCheckLabel.js","../node_modules/react-bootstrap/esm/FormCheck.js","../node_modules/react-bootstrap/esm/FormControl.js","../node_modules/react-bootstrap/esm/FormFloating.js","../node_modules/react-bootstrap/esm/FormGroup.js","../node_modules/react-bootstrap/esm/FormLabel.js","../node_modules/react-bootstrap/esm/FormRange.js","../node_modules/react-bootstrap/esm/FormSelect.js","../node_modules/react-bootstrap/esm/FormText.js","../node_modules/react-bootstrap/esm/Switch.js","../node_modules/react-bootstrap/esm/FloatingLabel.js","../node_modules/react-bootstrap/esm/Form.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","element","type","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","current","isObject","keys","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","omit","ref","focus","refs","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","isValid","validResult","options","option","checked","map","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","isMessage","validationData","isRegex","a","required","maxLength","minLength","min","max","pattern","validate","inputValue","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","Subscription","tearDowns","tearDown","push","teardown","Subscriber","observer","subscription","closed","add","next","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","formStateSubjectRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","setFormState","formStateRef","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getFormIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","names","currentNames","validateForm","fieldError","all","setInternalValues","inputKey","fieldName","isFieldWatched","has","updateValidAndValue","isWithinRefCallback","useFormDefaultValue","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","getNodeParentName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","subscribe","unregister","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","onChange","onBlur","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","control","getProxyFormState","React","FormCheckInput","id","bsPrefix","className","isInvalid","as","Component","controlId","useContext","useBootstrapPrefix","_jsx","classNames","InputGroupText","createWithBsPrefix","InputGroup","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","children","assign","Text","Radio","Checkbox","propTypes","PropTypes","string","tooltip","bool","elementType","Feedback","FormCheckLabel","htmlFor","FormCheck","bsSwitchPrefix","inline","feedbackTooltip","feedback","style","title","label","innerFormContext","hasLabel","_jsxs","_Fragment","Input","Label","FormControl","classes","htmlSize","plaintext","readOnly","FormGroup","FormLabel","column","visuallyHidden","columnClass","Col","defaultProps","FormRange","FormSelect","FormText","muted","Switch","FloatingLabel","_ref","any","validated","Form","Group","Control","Floating","FormFloating","Check","Range","Select"],"mappings":"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","file":"static/js/1.5950e3a3.chunk.js","sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetFormIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getFormIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    isWithinRefCallback?: boolean,\n  ) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n    const useFormDefaultValue = get(defaultValuesRef.current, name);\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? useFormDefaultValue\n        : field._f.value;\n\n      if (!isNullOrUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (\n      (useFormDefaultValue || (!useFormDefaultValue && isWithinRefCallback)) &&\n      options &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid &&\n          !isEmptyObject(error) &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        ref === field._f.ref ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n        (isRadioOrCheckbox &&\n          Array.isArray(field._f.refs) &&\n          compact(field._f.refs).find((option) => option === ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValidAndValue(name, options, true);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import * as React from 'react'; // TODO\n\nconst FormContext = /*#__PURE__*/React.createContext({});\nexport default FormContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormCheckInput = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  className,\n  type = 'checkbox',\n  isValid = false,\n  isInvalid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    type: type,\n    id: id || controlId,\n    className: classNames(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')\n  });\n});\nFormCheckInput.displayName = 'FormCheckInput';\nexport default FormCheckInput;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  as: Component = 'div',\n  className,\n  type = 'valid',\n  tooltip = false,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\n  ref: ref,\n  className: classNames(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)\n}));\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormCheckLabel = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  htmlFor,\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-label');\n  return /*#__PURE__*/_jsx(\"label\", { ...props,\n    ref: ref,\n    htmlFor: htmlFor || controlId,\n    className: classNames(className, bsPrefix)\n  });\n});\nFormCheckLabel.displayName = 'FormCheckLabel';\nexport default FormCheckLabel;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  bsSwitchPrefix,\n  inline = false,\n  disabled = false,\n  isValid = false,\n  isInvalid = false,\n  feedbackTooltip = false,\n  feedback,\n  className,\n  style,\n  title = '',\n  type = 'checkbox',\n  label,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as = 'input',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n  const {\n    controlId\n  } = useContext(FormContext);\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = label != null && label !== false && !children;\n\n  const input = /*#__PURE__*/_jsx(FormCheckInput, { ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: innerFormContext,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: classNames(className, label && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix),\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\n          title: title,\n          children: label\n        }), (isValid || isInvalid) && /*#__PURE__*/_jsx(Feedback, {\n          type: isValid ? 'valid' : 'invalid',\n          tooltip: feedbackTooltip,\n          children: feedback\n        })]\n      })\n    })\n  });\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  type,\n  size,\n  htmlSize,\n  id,\n  className,\n  isValid = false,\n  isInvalid = false,\n  plaintext,\n  readOnly,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  let classes;\n\n  if (plaintext) {\n    classes = {\n      [`${bsPrefix}-plaintext`]: true\n    };\n  } else {\n    classes = {\n      [bsPrefix]: true,\n      [`${bsPrefix}-${size}`]: size\n    };\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)\n  });\n});\nFormControl.displayName = 'FormControl';\nexport default Object.assign(FormControl, {\n  Feedback\n});","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('form-floating');","import * as React from 'react';\nimport { useMemo } from 'react';\nimport FormContext from './FormContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormGroup = /*#__PURE__*/React.forwardRef(({\n  controlId,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const context = useMemo(() => ({\n    controlId\n  }), [controlId]);\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: context,\n    children: /*#__PURE__*/_jsx(Component, { ...props,\n      ref: ref\n    })\n  });\n});\nFormGroup.displayName = 'FormGroup';\nexport default FormGroup;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Col from './Col';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  column: false,\n  visuallyHidden: false\n};\nconst FormLabel = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'label',\n  bsPrefix,\n  column,\n  visuallyHidden,\n  className,\n  htmlFor,\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-label');\n  let columnClass = 'col-form-label';\n  if (typeof column === 'string') columnClass = `${columnClass} ${columnClass}-${column}`;\n  const classes = classNames(className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.') : void 0;\n  htmlFor = htmlFor || controlId;\n  if (column) return /*#__PURE__*/_jsx(Col, {\n    as: \"label\",\n    className: classes,\n    htmlFor: htmlFor,\n    ...props\n  });\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control\n    _jsx(Component, {\n      ref: ref,\n      className: classes,\n      htmlFor: htmlFor,\n      ...props\n    })\n  );\n});\nFormLabel.displayName = 'FormLabel';\nFormLabel.defaultProps = defaultProps;\nexport default FormLabel;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormRange = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-range');\n  return /*#__PURE__*/_jsx(\"input\", { ...props,\n    type: \"range\",\n    ref: ref,\n    className: classNames(className, bsPrefix)\n  });\n});\nFormRange.displayName = 'FormRange';\nexport default FormRange;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormSelect = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  htmlSize,\n  className,\n  isValid = false,\n  isInvalid = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-select');\n  return /*#__PURE__*/_jsx(\"select\", { ...props,\n    size: htmlSize,\n    ref: ref,\n    className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`)\n  });\n});\nFormSelect.displayName = 'FormSelect';\nexport default FormSelect;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormText = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  as: Component = 'small',\n  muted,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-text');\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix, muted && 'text-muted')\n  });\n});\nFormText.displayName = 'FormText';\nexport default FormText;","import * as React from 'react';\nimport FormCheck from './FormCheck';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Switch = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(FormCheck, { ...props,\n  ref: ref,\n  type: \"switch\"\n}));\nSwitch.displayName = 'Switch';\nexport default Object.assign(Switch, {\n  Input: FormCheck.Input,\n  Label: FormCheck.Label\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport FormGroup from './FormGroup';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FloatingLabel = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  controlId,\n  label,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-floating');\n  return /*#__PURE__*/_jsxs(FormGroup, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    controlId: controlId,\n    ...props,\n    children: [children, /*#__PURE__*/_jsx(\"label\", {\n      htmlFor: controlId,\n      children: label\n    })]\n  });\n});\nFloatingLabel.displayName = 'FloatingLabel';\nexport default FloatingLabel;","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport FormCheck from './FormCheck';\nimport FormControl from './FormControl';\nimport FormFloating from './FormFloating';\nimport FormGroup from './FormGroup';\nimport FormLabel from './FormLabel';\nimport FormRange from './FormRange';\nimport FormSelect from './FormSelect';\nimport FormText from './FormText';\nimport Switch from './Switch';\nimport FloatingLabel from './FloatingLabel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * The Form `ref` will be forwarded to the underlying element,\n   * which means, unless it's rendered `as` a composite component,\n   * it will be a DOM node, when resolved.\n   *\n   * @type {ReactRef}\n   * @alias ref\n   */\n  _ref: PropTypes.any,\n\n  /**\n   * Mark a form as having been validated. Setting it to `true` will\n   * toggle any validation styles on the forms elements.\n   */\n  validated: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Form = /*#__PURE__*/React.forwardRef(({\n  className,\n  validated,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'form',\n  ...props\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\n  ref: ref,\n  className: classNames(className, validated && 'was-validated')\n}));\nForm.displayName = 'Form';\nForm.propTypes = propTypes;\nexport default Object.assign(Form, {\n  Group: FormGroup,\n  Control: FormControl,\n  Floating: FormFloating,\n  Check: FormCheck,\n  Switch,\n  Label: FormLabel,\n  Text: FormText,\n  Range: FormRange,\n  Select: FormSelect,\n  FloatingLabel\n});"],"sourceRoot":""}