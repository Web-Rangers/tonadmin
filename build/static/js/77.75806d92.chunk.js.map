{"version":3,"sources":["pages/forms/Basic.js","components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-overlays/esm/safeFindDOMNode.js","components/VerticalForm.js","components/FormInput.js","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js"],"names":["BasicInputElements","methods","useForm","defaultValues","password","statictext","color","handleSubmit","register","control","errors","formState","Body","className","lg","onSubmit","label","type","name","containerClass","placeholder","rows","id","readOnly","disabled","plaintext","Group","Label","htmlFor","Control","Text","multiple","Range","FloatingLabels","controlId","as","style","height","Select","value","md","SelectInput","Switches","Fragment","Check","CustomCheckboxes","InlineCustomCheckboxes","CustomRadios","InputSizes","size","sm","InputGroups","variant","title","Item","href","Divider","DefaultForm","defaultValue","HorizontalForm","Row","column","span","offset","InlineForm","bsPrefix","xs","visuallyHidden","HorizontalFormLabelSizing","FormGrid","Col","BasicForms","breadCrumbItems","path","active","PageTitle","props","map","item","index","React","p","ref","_jsx","classNames","context","displayName","toFnRef","current","useMergedRefs","refA","refB","useMemo","a","b","mergeRefs","DEVICE_SIZES","noGutters","Component","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","defaultProps","prefix","spans","order","length","BreadcrumbItem","children","linkAs","LinkComponent","SafeAnchor","linkProps","target","undefined","Breadcrumb","listProps","Object","assign","CardImg","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","Provider","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","Img","Title","Subtitle","Link","Header","Footer","ImgOverlay","safeFindDOMNode","componentOrElement","ReactDOM","findDOMNode","VerticalForm","resolver","formClass","noValidate","Array","isArray","child","createElement","key","PasswordInput","refCallback","useState","showPassword","setShowPassword","InputGroup","Form","r","isInvalid","autoComplete","onClick","FormInput","labelClassName","otherProps","comp","Feedback","alignDirection","PropTypes","oneOf","alignPropType","oneOfType","shape","xl","xxl","propTypes","any","string","func","node","isRequired","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","DropdownButton","_jsxs","Dropdown","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount"],"mappings":"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","file":"static/js/77.75806d92.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Form, FloatingLabel, InputGroup, Button, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { FormInput } from '../../components/';\n\nconst BasicInputElements = () => {\n    /*\n     * form methods\n     */\n    const methods = useForm({\n        defaultValues: { password: '12345', statictext: 'email@example.com', color: '#727cf5' },\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Input Types</h4>\n                    <p className=\"text-muted\">\n                        Most common form control, text-based input fields. Includes support for all HTML5 types:{' '}\n                        <code>text</code>, <code>password</code>, <code>datetime</code>, <code>datetime-local</code>,{' '}\n                        <code>date</code>, <code>month</code>, <code>time</code>, <code>week</code>, <code>number</code>\n                        , <code>email</code>, <code>url</code>, <code>search</code>, <code>tel</code>, and{' '}\n                        <code>color</code>.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    label=\"Text\"\n                                    type=\"text\"\n                                    name=\"text\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"email\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Show/Hide Password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\"password placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"password\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Placeholder\"\n                                    type=\"text\"\n                                    name=\"placeholder\"\n                                    placeholder=\"placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"placeholder\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Text Area\"\n                                    type=\"textarea\"\n                                    name=\"textarea\"\n                                    rows=\"5\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"textarea\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Read only\"\n                                    type=\"text\"\n                                    name=\"text1\"\n                                    id=\"text1\"\n                                    placeholder=\"Readonly value\"\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text1\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Disabled\"\n                                    type=\"text\"\n                                    name=\"text2\"\n                                    id=\"text2\"\n                                    placeholder=\"Disabled value\"\n                                    disabled\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text2\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Static control\"\n                                    type=\"text\"\n                                    name=\"statictext\"\n                                    placeholder=\"Disabled\"\n                                    plaintext\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"statictext\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label htmlFor=\"text3\" className=\"form-label\">\n                                        Helping text\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name=\"text\" id=\"text3\" placeholder=\"Helping text\" />\n                                    <Form.Text>\n                                        A block of help text that breaks onto a new line and may extend beyond one line.\n                                    </Form.Text>\n                                </Form.Group>\n                            </form>\n                        </Col>\n\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    name=\"select\"\n                                    label=\"Input Select\"\n                                    type=\"select\"\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"select\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    name=\"selectMulti\"\n                                    label=\"Multiple Select\"\n                                    type=\"select\"\n                                    multiple\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"selectMulti\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    label=\"Default file input\"\n                                    type=\"file\"\n                                    name=\"file\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"file\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Date\"\n                                    type=\"date\"\n                                    name=\"date\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"date\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Month\"\n                                    type=\"month\"\n                                    name=\"month\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"month\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Time\"\n                                    type=\"time\"\n                                    name=\"time\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"time\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Week\"\n                                    type=\"week\"\n                                    name=\"week\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"week\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Number\"\n                                    type=\"number\"\n                                    name=\"number\"\n                                    placeholder=\"number placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"number\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Color\"\n                                    type=\"color\"\n                                    name=\"color\"\n                                    placeholder=\"color placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"color\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-0\">\n                                    <Form.Label htmlFor=\"exampleRange\" className=\"form-label\">\n                                        Range\n                                    </Form.Label>\n                                    <Form.Range />\n                                </Form.Group>\n                            </form>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FloatingLabels = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Floating labels</h4>\n                    <p className=\"text-muted\">\n                        Wrap a <code>&lt;Form.Control&gt;</code> element in <code>&lt;FloatingLabel&gt;</code>\n                        to enable floating labels with Bootstrap’s textual form fields. A <code>placeholder</code>\n                        is required on each <code>&lt;Form.Control&gt;</code> as our method of CSS-only floating labels\n                        uses the <code>:placeholder-shown</code> pseudo-element.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Example</h5>\n                            <FloatingLabel controlId=\"floatingInput\" label=\"Email address\" className=\"mb-3\">\n                                <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                            </FloatingLabel>\n                            <FloatingLabel controlId=\"floatingPassword\" label=\"Password\">\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Textareas</h5>\n                            <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\n                                <Form.Control\n                                    as=\"textarea\"\n                                    placeholder=\"Leave a comment here\"\n                                    style={{ height: '100px' }}\n                                />\n                            </FloatingLabel>\n                        </Col>\n\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Selects</h5>\n                            <FloatingLabel controlId=\"floatingSelect\" label=\"Works with selects\">\n                                <Form.Select aria-label=\"Floating label select example\">\n                                    <option>Open this select menu</option>\n                                    <option value=\"1\">One</option>\n                                    <option value=\"2\">Two</option>\n                                    <option value=\"3\">Three</option>\n                                </Form.Select>\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Layout</h5>\n                            <Row className=\"g-2\">\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingInputGrid\" label=\"Email address\">\n                                        <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                                    </FloatingLabel>\n                                </Col>\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingSelectGrid\" label=\"Works with selects\">\n                                        <Form.Select aria-label=\"Floating label select example\">\n                                            <option>Open this select menu</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </Form.Select>\n                                    </FloatingLabel>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst SelectInput = () => {\n    return (\n        <>\n            <h4 className=\"header-title\">Select menu</h4>\n            <p className=\"text-muted\">\n                Custom <code>&lt;select&gt;</code> menus need only a custom class, <code>.custom-select</code> to\n                trigger the custom styles.\n            </p>\n\n            <Form.Group>\n                <Form.Select className=\"custom-select mt-3\" aria-label=\"Default select example\">\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                    <option>4</option>\n                    <option>5</option>\n                </Form.Select>\n            </Form.Group>\n        </>\n    );\n};\n\nconst Switches = () => {\n    return (\n        <React.Fragment>\n            <h4 className=\"header-title mt-4\">Switches</h4>\n            <p className=\"text-muted\">\n                A switch has the markup of a custom checkbox but uses the <code>.custom-switch</code> class to render a\n                toggle switch. Switches also support the <code>disabled</code> attribute.\n            </p>\n\n            <Form>\n                <Form.Check type=\"switch\" id=\"custom-switch\" label=\"Toggle this switch element\" />\n                <Form.Check\n                    disabled\n                    type=\"switch\"\n                    label=\"Disabled switch element\"\n                    id=\"disabled-custom-switch\"\n                    className=\"mt-1\"\n                />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst CustomCheckboxes = () => {\n    return (\n        <>\n            <Form.Group>\n                <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                    Checkboxes\n                </Form.Label>\n                <div>\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n                </div>\n            </Form.Group>\n        </>\n    );\n};\n\nconst InlineCustomCheckboxes = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-check-label\" htmlFor=\"exampleCheckbox\">\n                Inline\n            </Form.Label>\n            <div>\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"An inline custom input\" />\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"and another one\" />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst CustomRadios = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                Radios\n            </Form.Label>\n            <div>\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst InputSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Sizes</h4>\n                <p className=\"text-muted\">\n                    Use size on <code>&lt;FormControl&gt;</code> and <code>&lt;FormLabel&gt;</code> to change the size\n                    of inputs and labels respectively.\n                </p>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"small\">Small</Form.Label>\n                        <Form.Control type=\"text\" name=\"small\" id=\"small\" placeholder=\"Small\" size=\"sm\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Normal\">Normal</Form.Label>\n                        <Form.Control type=\"text\" name=\"Normal\" id=\"Normal\" placeholder=\"Normal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Large\">Large</Form.Label>\n                        <Form.Control type=\"text\" name=\"Large\" id=\"Large\" placeholder=\"Large\" size=\"lg\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-0\">\n                        <Form.Label htmlFor=\"grid\">Grid Sizes</Form.Label>\n                        <Row>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" name=\"grid\" id=\"grid\" placeholder=\".col-sm-4\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InputGroups = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Group</h4>\n                <p className=\"text-muted\">\n                    Easily extend form conrols by adding text, buttons, or button groups on either side of textual\n                    inputs, custom selects, and custom file inputs\n                </p>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Static\">Static</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            <Form.Control\n                                placeholder=\"Username\"\n                                aria-label=\"Username\"\n                                aria-describedby=\"basic-addon1\"\n                            />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Dropdown\">Dropdown</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton variant=\"primary\" title=\"Dropdown\" id=\"input-group-dropdown-1\">\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </DropdownButton>\n                            <Form.Control aria-label=\"Text input with dropdown button\" />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Button\">Button</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <Form.Control\n                                placeholder=\"Recipient's username\"\n                                aria-label=\"Recipient's username\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <Button variant=\"dark\" id=\"button-addon2\">\n                                Button\n                            </Button>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Row className=\"g-2\">\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"file\">File input</Form.Label>\n                                <Form.Control type=\"file\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"formFileMultiple01\">Multiple input</Form.Label>\n                                <Form.Control type=\"file\" multiple />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DefaultForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Basic Example</h4>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail2\">Email</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail2\" placeholder=\"Enter your email\" />\n                        <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword2\">Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"examplePassword2\"\n                            placeholder=\"password placeholder\"\n                            defaultValue=\"12345\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Horizontal Form</h4>\n                <Form>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail3\" column sm={3}>\n                            Email\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail3\" placeholder=\"Enter your email\" />\n                            <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword3\" column sm={3}>\n                            Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword3\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword4\" column sm={3}>\n                            Re-Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword4\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Form.Check label=\"Remember me\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-0\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Sign in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InlineForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Inline Form Example</h4>\n                <Form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                readOnly\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"exampleEmail4\"\n                                bsPrefix=\"form-control-plaintext\"\n                                placeholder=\"email@example.com\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword5\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm identity\n                        </Button>\n                    </div>\n                </Form>\n\n                <h6 className=\"font-13 mt-3\">Auto-sizing</h6>\n\n                <Form>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                                Name\n                            </Form.Label>\n                            <Form.Control className=\"mb-2\" id=\"inlineFormInput\" placeholder=\"Jane Doe\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Text>@</InputGroup.Text>\n                                <Form.Control id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n                            </InputGroup>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Check type=\"checkbox\" id=\"autoSizingCheck\" className=\"mb-2\" label=\"Remember me\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Button type=\"submit\" className=\"mb-2\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalFormLabelSizing = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Horizontal form label sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        You can size the <code>&lt;FormLabel&gt;</code> using the column prop as shown.\n                    </p>\n\n                    <Row>\n                        <Form.Label column=\"lg\" lg={2}>\n                            Large Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"lg\" type=\"text\" placeholder=\"Large text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column lg={2}>\n                            Normal Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control type=\"text\" placeholder=\"Normal text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column=\"sm\" lg={2}>\n                            Small Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"sm\" type=\"text\" placeholder=\"Small text\" />\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FormGrid = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Form Grid</h4>\n\n                    <Form>\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control placeholder=\"1234 Main St\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                            <Form.Label>Address 2</Form.Label>\n                            <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                        </Form.Group>\n\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridCity\">\n                                <Form.Label>City</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridState\">\n                                <Form.Label>State</Form.Label>\n                                <Form.Select defaultValue=\"Choose...\">\n                                    <option>Choose...</option>\n                                    <option>...</option>\n                                </Form.Select>\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridZip\">\n                                <Form.Label>Zip</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                            <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BasicForms = (): React$Element<React$FragmentType> => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/basic' },\n                    { label: 'Form Elements', path: '/forms/basic', active: true },\n                ]}\n                title={'Form Elements'}\n            />\n\n            <Row>\n                <Col>\n                    <BasicInputElements />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FloatingLabels />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col lg={6}>\n                                    <SelectInput />\n                                    <Switches />\n                                </Col>\n\n                                <Col lg={6}>\n                                    <h4 className=\"header-title mt-5 mt-sm-0\">Checkboxes and radios</h4>\n                                    <div className=\"mt-3\">\n                                        <CustomCheckboxes />\n                                        <CustomRadios />\n                                        <InlineCustomCheckboxes />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <InputSizes />\n                </Col>\n\n                <Col lg={6}>\n                    <InputGroups />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultForm />\n                </Col>\n\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <InlineForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <HorizontalFormLabelSizing />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FormGrid />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\nexport default BasicForms;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb className=\"m-0\">\n                            <Breadcrumb.Item href=\"/\">Hyper</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst defaultProps = {\n  noGutters: false\n};\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  noGutters,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, noGutters && 'no-gutters', ...classes)\n  });\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'col');\n  const spans = [];\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span = true,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${prefix}${infix}` : `${prefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    className: classNames(className, ...spans, ...classes)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport SafeAnchor from './SafeAnchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  active: false,\n  linkProps: {}\n};\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = SafeAnchor,\n  linkProps,\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, { ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  label: 'breadcrumb',\n  listProps: {}\n};\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps,\n  children,\n  label,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", { ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.defaultProps = defaultProps;\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import ReactDOM from 'react-dom';\nexport default function safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n\n  return componentOrElement != null ? componentOrElement : null;\n}","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        <Form.Check\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}\n                                        />\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                    <Form.Control\n                                        type={type}\n                                        placeholder={placeholder}\n                                        name={name}\n                                        id={name}\n                                        as={comp}\n                                        ref={(r) => {\n                                            if (refCallback) refCallback(r);\n                                        }}\n                                        className={className}\n                                        isInvalid={errors && errors[name] ? true : false}\n                                        {...(register ? register(name) : {})}\n                                        {...otherProps}\n                                        autoComplete={name}>\n                                        {children ? children : null}\n                                    </Form.Control>\n\n                                    {errors && errors[name] ? (\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors[name]['message']}\n                                        </Form.Control.Feedback>\n                                    ) : null}\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n})]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;"],"sourceRoot":""}