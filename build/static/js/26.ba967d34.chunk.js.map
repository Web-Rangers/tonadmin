{"version":3,"sources":["components/Pagination.js","components/Table.js","pages/ValidatorsList.js"],"names":["Pagination","tableProps","sizePerPageList","className","value","state","pageSize","onChange","e","setPageSize","Number","target","map","index","text","pageIndex","pageOptions","length","type","defaultValue","page","gotoPage","onClick","disabled","canPreviousPage","previousPage","nextPage","canNextPage","pageCount","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","React","useState","setValue","useAsyncDebounce","undefined","classNames","placeholder","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","htmlFor","Table","props","isSearchable","isSortable","pagination","isSelectable","isExpandable","dataTable","useTable","columns","data","initialState","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","api","APICore","accessor","url","href","parseFloat","ValidatorsList","setData","setLoading","setAddButton","a","updateWallets","sendJRPC","result","error","tableData","totalWeight","Object","keys","forEach","weight","adnlAddr","walletAddr","status","efficiency","toFixed","online","Body"],"mappings":"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","file":"static/js/26.ba967d34.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\n\ntype PaginationProps = {\n    tableProps: any,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <div className=\"d-lg-flex align-items-center text-center pb-1\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={tableProps.state.pageSize}\n                    onChange={(e) => {\n                        tableProps.setPageSize(Number(e.target.value));\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {sizePerPageList.map((pageSize, index) => {\n                        return (\n                            <option key={index} value={pageSize.value}>\n                                {pageSize.text}\n                            </option>\n                        );\n                    })}\n                </select>\n\n                <span className=\"mx-3\">\n                    Page{' '}\n                    <strong>\n                        {tableProps.state.pageIndex + 1} of {tableProps.pageOptions.length}\n                    </strong>{' '}\n                </span>\n\n                <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n                    <label>Go to page : </label>\n                    <input\n                        type=\"number\"\n                        defaultValue={tableProps.state.pageIndex + 1}\n                        onChange={(e) => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                            tableProps.gotoPage(page);\n                        }}\n                        className=\"form-control w-25 ms-1 d-inline-block\"\n                    />\n                </span>\n\n                <div className=\"pagination pagination-rounded d-inline-flex ms-auto\">\n                    <button\n                        onClick={() => tableProps.gotoPage(0)}\n                        className=\"page-link\"\n                        disabled={!tableProps.canPreviousPage}>\n                        {'<<'}\n                    </button>{' '}\n                    <button\n                        onClick={() => tableProps.previousPage()}\n                        className=\"page-link\"\n                        disabled={!tableProps.canPreviousPage}>\n                        {'<'}\n                    </button>{' '}\n                    <button\n                        onClick={() => tableProps.nextPage()}\n                        className=\"page-link\"\n                        disabled={!tableProps.canNextPage}>\n                        {'>'}\n                    </button>{' '}\n                    <button\n                        onClick={() => tableProps.gotoPage(tableProps.pageCount - 1)}\n                        className=\"page-link\"\n                        disabled={!tableProps.canNextPage}>\n                        {'>>'}\n                    </button>{' '}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React, { useRef, useEffect, forwardRef } from 'react';\nimport {\n    useTable,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useGlobalFilter,\n    useAsyncDebounce,\n    useExpanded,\n} from 'react-table';\nimport classNames from 'classnames';\n\n// components\nimport Pagination from './Pagination';\n\n// Define a default UI for filtering\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }) => {\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className={classNames(searchBoxClass)}>\n            <span className=\"d-flex align-items-center\">\n                Search :{' '}\n                <input\n                    value={value || ''}\n                    onChange={(e) => {\n                        setValue(e.target.value);\n                        onChange(e.target.value);\n                    }}\n                    placeholder={`${count} records...`}\n                    className=\"form-control w-auto ms-1\"\n                />\n            </span>\n        </div>\n    );\n};\n\nconst IndeterminateCheckbox = forwardRef(({ indeterminate, ...rest }, ref) => {\n    const defaultRef = useRef();\n    const resolvedRef: any = ref || defaultRef;\n\n    useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n        <>\n            <div className=\"form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\n                <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n            </div>\n        </>\n    );\n});\n\ntype TableProps = {\n    isSearchable?: boolean,\n    isSortable?: boolean,\n    pagination?: boolean,\n    isSelectable?: boolean,\n    isExpandable?: boolean,\n    pageSize: number,\n    columns: Array<any>,\n    data: Array<any>,\n    searchBoxClass?: string,\n    tableClass?: string,\n    theadClass?: string,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Table = (props: TableProps): React$Element<React$FragmentType> => {\n    const isSearchable = props['isSearchable'] || false;\n    const isSortable = props['isSortable'] || false;\n    const pagination = props['pagination'] || false;\n    const isSelectable = props['isSelectable'] || false;\n    const isExpandable = props['isExpandable'] || false;\n\n    const dataTable = useTable(\n        {\n            columns: props['columns'],\n            data: props['data'],\n            initialState: { pageSize: props['pageSize'] || 10 },\n        },\n        isSearchable && useGlobalFilter,\n        isSortable && useSortBy,\n        isExpandable && useExpanded,\n        pagination && usePagination,\n        isSelectable && useRowSelect,\n        (hooks) => {\n            isSelectable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllPageRowsSelectedProps }) => (\n                            <div>\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ]);\n\n            isExpandable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        // Build our expander column\n                        id: 'expander', // Make sure it has an ID\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\n                        ),\n                        Cell: ({ row }) =>\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                            // to build the toggle for expanding a row\n                            row.canExpand ? (\n                                <span\n                                    {...row.getToggleRowExpandedProps({\n                                        style: {\n                                            // We can even use the row.depth property\n                                            // and paddingLeft to indicate the depth\n                                            // of the row\n                                            paddingLeft: `${row.depth * 2}rem`,\n                                        },\n                                    })}>\n                                    {row.isExpanded ? '-' : '+'}\n                                </span>\n                            ) : null,\n                    },\n                    ...columns,\n                ]);\n        }\n    );\n\n    let rows = pagination ? dataTable.page : dataTable.rows;\n\n    return (\n        <>\n            {isSearchable && (\n                <GlobalFilter\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n                    globalFilter={dataTable.state.globalFilter}\n                    setGlobalFilter={dataTable.setGlobalFilter}\n                    searchBoxClass={props['searchBoxClass']}\n                />\n            )}\n\n            <div className=\"table-responsive\">\n                <table\n                    {...dataTable.getTableProps()}\n                    className={classNames('table table-centered react-table', props['tableClass'])}>\n                    <thead className={props['theadClass']}>\n                        {dataTable.headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map((column) => (\n                                    <th\n                                        {...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\n                                        className={classNames({\n                                            sorting_desc: column.isSortedDesc === true,\n                                            sorting_asc: column.isSortedDesc === false,\n                                            sortable: column.sort === true,\n                                        })}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...dataTable.getTableBodyProps()}>\n                        {(rows || []).map((row, i) => {\n                            dataTable.prepareRow(row);\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map((cell) => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={props['sizePerPageList']} />}\n        </>\n    );\n};\n\nexport default Table;\n","// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, Button, Modal, Alert } from 'react-bootstrap';\nimport Skeleton from 'react-loading-skeleton';\nimport classNames from 'classnames';\n\n// components\n\nimport Table from '../components/Table';\n\nimport { APICore } from '../helpers/api/apiCore';\n\nconst api = new APICore();\n\nconst columns = [\n    {\n        Header: 'Wallet / ADNL',\n        accessor: 'adnlAddr',\n        sort: true,\n        Cell: Wallet,\n    },\n    {\n        Header: 'Status',\n        accessor: 'online',\n        sort: true,\n        Cell: Online,\n    },\n    {\n        Header: 'Weight',\n        accessor: 'weight',\n        sort: true,\n    },\n    {\n        Header: 'Efficiency',\n        accessor: 'efficiency',\n        sort: true,\n        Cell: Cell,\n    },\n\n];\n\nconst sizePerPageList = [\n    {\n        text: '5',\n        value: 5,\n    },\n    {\n        text: '10',\n        value: 10,\n    },\n    {\n        text: '25',\n        value: 25,\n    }\n];\n\nfunction Cell({ value }) {\n  switch(true){\n    case parseFloat(value) > 90:\n      return <span className=\"text-success\">{value}%</span>\n    case parseFloat(value) > 50:\n      return <span className=\"text-warning\">{value}%</span>\n    default:\n      return <span className=\"text-danger\">{value}%</span>\n  }\n}\n\nfunction Online({ value }) {\n  switch(value){\n    case true:\n      return <span className=\"badge badge-success-lighten\">ONLINE</span>\n    default:\n      return <span className=\"badge badge-danger-lighten\">OFFLINE</span>\n  }\n}\n\nfunction Wallet({ value }) {\n  let url = \"https://ton.sh/address/\" + value;\n  if(value.length <= 48){\n    return <a target=\"_blank\" href={url}>{value}</a>\n  }else{\n    return value;\n  }\n\n}\n\n\n\n\nconst ValidatorsList = (): React$Element<any> => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [addButton, setAddButton] = useState(false);\n    const [createModal, setCreateModal] = useState(false);\n    const [walletName, setWalletName] = useState(false);\n    const [workchain, setWorkchain] = useState(0);\n\n    const toggleCreate = () => {\n        setCreateModal(!createModal);\n    };\n\n    useEffect(async () => {\n      updateWallets()\n    }, []);\n\n    const updateWalletName = (event) => {\n      setWalletName(event.target.value)\n    }\n    const updateWorkchain = (event) => {\n      setWorkchain(event.target.value)\n    }\n\n    const createWallet = async (e) => {\n      e.preventDefault();\n      setLoading(true)\n      setAddButton(false)\n      const result = await api.sendJRPC('/', 'nw', [walletName, workchain])\n      if(result && result.data && result.data.result){\n          updateWallets()\n      }else{\n          setData([]);\n          setAddButton(true)\n          setLoading(false)\n      }\n    }\n\n    const updateWallets = async () =>{\n      setLoading(true)\n      const result = await api.sendJRPC('/', 'vl')\n\n      if(result && !result.error && result.data && result.data.result !== \"empty\"){\n        let data = result.data.result\n          let tableData = []\n            let totalWeight = 0\n            Object.keys(data).forEach(row => {\n              totalWeight += data[row].weight\n            })\n\n            Object.keys(data).forEach(row => {\n              tableData.push({\n                  adnlAddr: data[row].walletAddr ? data[row].walletAddr: data[row].adnlAddr,\n                  status: data[row].status,\n                  efficiency: data[row].efficiency,\n                  weight: (data[row].weight/totalWeight*100).toFixed(1) + '%',\n                  online: data[row].online,\n              })\n            })\n            setData(tableData);\n\n      }else{\n          setData([]);\n          setAddButton(true)\n      }\n      setLoading(false)\n    }\n\n    return (\n        <>\n          <Row>\n              <Col>\n                  <Card>\n                      <Card.Body>\n                          <h4 className=\"header-title\">TON Validators list</h4>\n                          {data.length > 0 ?\n                          <Table\n                              columns={columns}\n                              data={data}\n                              sizePerPageList={sizePerPageList}\n                              isSortable={true}\n                              pagination={false}\n                          />\n                          :\n                          <Skeleton count={7} />\n                          }\n                      </Card.Body>\n                  </Card>\n              </Col>\n          </Row>\n        </>\n    );\n};\n\nexport default ValidatorsList;\n"],"sourceRoot":""}